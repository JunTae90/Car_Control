
I2C_IMU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000266c  080001e0  080001e0  000101e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  0800284c  0800284c  0001284c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080028dc  080028dc  000128dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080028e4  080028e4  000128e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080028e8  080028e8  000128e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  080028ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000051c  2000000c  080028f8  0002000c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000528  080028f8  00020528  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001f7cf  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00003696  00000000  00000000  0003f80b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000c242  00000000  00000000  00042ea1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000eb0  00000000  00000000  0004f0e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001288  00000000  00000000  0004ff98  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000869e  00000000  00000000  00051220  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00005c6f  00000000  00000000  000598be  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0005f52d  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002c48  00000000  00000000  0005f5ac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000000c 	.word	0x2000000c
 80001fc:	00000000 	.word	0x00000000
 8000200:	08002834 	.word	0x08002834

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000010 	.word	0x20000010
 800021c:	08002834 	.word	0x08002834

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b97a 	b.w	800052c <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	468c      	mov	ip, r1
 8000256:	460d      	mov	r5, r1
 8000258:	4604      	mov	r4, r0
 800025a:	9e08      	ldr	r6, [sp, #32]
 800025c:	2b00      	cmp	r3, #0
 800025e:	d151      	bne.n	8000304 <__udivmoddi4+0xb4>
 8000260:	428a      	cmp	r2, r1
 8000262:	4617      	mov	r7, r2
 8000264:	d96d      	bls.n	8000342 <__udivmoddi4+0xf2>
 8000266:	fab2 fe82 	clz	lr, r2
 800026a:	f1be 0f00 	cmp.w	lr, #0
 800026e:	d00b      	beq.n	8000288 <__udivmoddi4+0x38>
 8000270:	f1ce 0c20 	rsb	ip, lr, #32
 8000274:	fa01 f50e 	lsl.w	r5, r1, lr
 8000278:	fa20 fc0c 	lsr.w	ip, r0, ip
 800027c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000280:	ea4c 0c05 	orr.w	ip, ip, r5
 8000284:	fa00 f40e 	lsl.w	r4, r0, lr
 8000288:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800028c:	0c25      	lsrs	r5, r4, #16
 800028e:	fbbc f8fa 	udiv	r8, ip, sl
 8000292:	fa1f f987 	uxth.w	r9, r7
 8000296:	fb0a cc18 	mls	ip, sl, r8, ip
 800029a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800029e:	fb08 f309 	mul.w	r3, r8, r9
 80002a2:	42ab      	cmp	r3, r5
 80002a4:	d90a      	bls.n	80002bc <__udivmoddi4+0x6c>
 80002a6:	19ed      	adds	r5, r5, r7
 80002a8:	f108 32ff 	add.w	r2, r8, #4294967295
 80002ac:	f080 8123 	bcs.w	80004f6 <__udivmoddi4+0x2a6>
 80002b0:	42ab      	cmp	r3, r5
 80002b2:	f240 8120 	bls.w	80004f6 <__udivmoddi4+0x2a6>
 80002b6:	f1a8 0802 	sub.w	r8, r8, #2
 80002ba:	443d      	add	r5, r7
 80002bc:	1aed      	subs	r5, r5, r3
 80002be:	b2a4      	uxth	r4, r4
 80002c0:	fbb5 f0fa 	udiv	r0, r5, sl
 80002c4:	fb0a 5510 	mls	r5, sl, r0, r5
 80002c8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002cc:	fb00 f909 	mul.w	r9, r0, r9
 80002d0:	45a1      	cmp	r9, r4
 80002d2:	d909      	bls.n	80002e8 <__udivmoddi4+0x98>
 80002d4:	19e4      	adds	r4, r4, r7
 80002d6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002da:	f080 810a 	bcs.w	80004f2 <__udivmoddi4+0x2a2>
 80002de:	45a1      	cmp	r9, r4
 80002e0:	f240 8107 	bls.w	80004f2 <__udivmoddi4+0x2a2>
 80002e4:	3802      	subs	r0, #2
 80002e6:	443c      	add	r4, r7
 80002e8:	eba4 0409 	sub.w	r4, r4, r9
 80002ec:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002f0:	2100      	movs	r1, #0
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	d061      	beq.n	80003ba <__udivmoddi4+0x16a>
 80002f6:	fa24 f40e 	lsr.w	r4, r4, lr
 80002fa:	2300      	movs	r3, #0
 80002fc:	6034      	str	r4, [r6, #0]
 80002fe:	6073      	str	r3, [r6, #4]
 8000300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000304:	428b      	cmp	r3, r1
 8000306:	d907      	bls.n	8000318 <__udivmoddi4+0xc8>
 8000308:	2e00      	cmp	r6, #0
 800030a:	d054      	beq.n	80003b6 <__udivmoddi4+0x166>
 800030c:	2100      	movs	r1, #0
 800030e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000312:	4608      	mov	r0, r1
 8000314:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000318:	fab3 f183 	clz	r1, r3
 800031c:	2900      	cmp	r1, #0
 800031e:	f040 808e 	bne.w	800043e <__udivmoddi4+0x1ee>
 8000322:	42ab      	cmp	r3, r5
 8000324:	d302      	bcc.n	800032c <__udivmoddi4+0xdc>
 8000326:	4282      	cmp	r2, r0
 8000328:	f200 80fa 	bhi.w	8000520 <__udivmoddi4+0x2d0>
 800032c:	1a84      	subs	r4, r0, r2
 800032e:	eb65 0503 	sbc.w	r5, r5, r3
 8000332:	2001      	movs	r0, #1
 8000334:	46ac      	mov	ip, r5
 8000336:	2e00      	cmp	r6, #0
 8000338:	d03f      	beq.n	80003ba <__udivmoddi4+0x16a>
 800033a:	e886 1010 	stmia.w	r6, {r4, ip}
 800033e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000342:	b912      	cbnz	r2, 800034a <__udivmoddi4+0xfa>
 8000344:	2701      	movs	r7, #1
 8000346:	fbb7 f7f2 	udiv	r7, r7, r2
 800034a:	fab7 fe87 	clz	lr, r7
 800034e:	f1be 0f00 	cmp.w	lr, #0
 8000352:	d134      	bne.n	80003be <__udivmoddi4+0x16e>
 8000354:	1beb      	subs	r3, r5, r7
 8000356:	0c3a      	lsrs	r2, r7, #16
 8000358:	fa1f fc87 	uxth.w	ip, r7
 800035c:	2101      	movs	r1, #1
 800035e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000362:	0c25      	lsrs	r5, r4, #16
 8000364:	fb02 3318 	mls	r3, r2, r8, r3
 8000368:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800036c:	fb0c f308 	mul.w	r3, ip, r8
 8000370:	42ab      	cmp	r3, r5
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0x134>
 8000374:	19ed      	adds	r5, r5, r7
 8000376:	f108 30ff 	add.w	r0, r8, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x132>
 800037c:	42ab      	cmp	r3, r5
 800037e:	f200 80d1 	bhi.w	8000524 <__udivmoddi4+0x2d4>
 8000382:	4680      	mov	r8, r0
 8000384:	1aed      	subs	r5, r5, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb5 f0f2 	udiv	r0, r5, r2
 800038c:	fb02 5510 	mls	r5, r2, r0, r5
 8000390:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000394:	fb0c fc00 	mul.w	ip, ip, r0
 8000398:	45a4      	cmp	ip, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x15c>
 800039c:	19e4      	adds	r4, r4, r7
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x15a>
 80003a4:	45a4      	cmp	ip, r4
 80003a6:	f200 80b8 	bhi.w	800051a <__udivmoddi4+0x2ca>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 040c 	sub.w	r4, r4, ip
 80003b0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003b4:	e79d      	b.n	80002f2 <__udivmoddi4+0xa2>
 80003b6:	4631      	mov	r1, r6
 80003b8:	4630      	mov	r0, r6
 80003ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003be:	f1ce 0420 	rsb	r4, lr, #32
 80003c2:	fa05 f30e 	lsl.w	r3, r5, lr
 80003c6:	fa07 f70e 	lsl.w	r7, r7, lr
 80003ca:	fa20 f804 	lsr.w	r8, r0, r4
 80003ce:	0c3a      	lsrs	r2, r7, #16
 80003d0:	fa25 f404 	lsr.w	r4, r5, r4
 80003d4:	ea48 0803 	orr.w	r8, r8, r3
 80003d8:	fbb4 f1f2 	udiv	r1, r4, r2
 80003dc:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003e0:	fb02 4411 	mls	r4, r2, r1, r4
 80003e4:	fa1f fc87 	uxth.w	ip, r7
 80003e8:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003ec:	fb01 f30c 	mul.w	r3, r1, ip
 80003f0:	42ab      	cmp	r3, r5
 80003f2:	fa00 f40e 	lsl.w	r4, r0, lr
 80003f6:	d909      	bls.n	800040c <__udivmoddi4+0x1bc>
 80003f8:	19ed      	adds	r5, r5, r7
 80003fa:	f101 30ff 	add.w	r0, r1, #4294967295
 80003fe:	f080 808a 	bcs.w	8000516 <__udivmoddi4+0x2c6>
 8000402:	42ab      	cmp	r3, r5
 8000404:	f240 8087 	bls.w	8000516 <__udivmoddi4+0x2c6>
 8000408:	3902      	subs	r1, #2
 800040a:	443d      	add	r5, r7
 800040c:	1aeb      	subs	r3, r5, r3
 800040e:	fa1f f588 	uxth.w	r5, r8
 8000412:	fbb3 f0f2 	udiv	r0, r3, r2
 8000416:	fb02 3310 	mls	r3, r2, r0, r3
 800041a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800041e:	fb00 f30c 	mul.w	r3, r0, ip
 8000422:	42ab      	cmp	r3, r5
 8000424:	d907      	bls.n	8000436 <__udivmoddi4+0x1e6>
 8000426:	19ed      	adds	r5, r5, r7
 8000428:	f100 38ff 	add.w	r8, r0, #4294967295
 800042c:	d26f      	bcs.n	800050e <__udivmoddi4+0x2be>
 800042e:	42ab      	cmp	r3, r5
 8000430:	d96d      	bls.n	800050e <__udivmoddi4+0x2be>
 8000432:	3802      	subs	r0, #2
 8000434:	443d      	add	r5, r7
 8000436:	1aeb      	subs	r3, r5, r3
 8000438:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800043c:	e78f      	b.n	800035e <__udivmoddi4+0x10e>
 800043e:	f1c1 0720 	rsb	r7, r1, #32
 8000442:	fa22 f807 	lsr.w	r8, r2, r7
 8000446:	408b      	lsls	r3, r1
 8000448:	fa05 f401 	lsl.w	r4, r5, r1
 800044c:	ea48 0303 	orr.w	r3, r8, r3
 8000450:	fa20 fe07 	lsr.w	lr, r0, r7
 8000454:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000458:	40fd      	lsrs	r5, r7
 800045a:	ea4e 0e04 	orr.w	lr, lr, r4
 800045e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000462:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000466:	fb0c 5519 	mls	r5, ip, r9, r5
 800046a:	fa1f f883 	uxth.w	r8, r3
 800046e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000472:	fb09 f408 	mul.w	r4, r9, r8
 8000476:	42ac      	cmp	r4, r5
 8000478:	fa02 f201 	lsl.w	r2, r2, r1
 800047c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x244>
 8000482:	18ed      	adds	r5, r5, r3
 8000484:	f109 30ff 	add.w	r0, r9, #4294967295
 8000488:	d243      	bcs.n	8000512 <__udivmoddi4+0x2c2>
 800048a:	42ac      	cmp	r4, r5
 800048c:	d941      	bls.n	8000512 <__udivmoddi4+0x2c2>
 800048e:	f1a9 0902 	sub.w	r9, r9, #2
 8000492:	441d      	add	r5, r3
 8000494:	1b2d      	subs	r5, r5, r4
 8000496:	fa1f fe8e 	uxth.w	lr, lr
 800049a:	fbb5 f0fc 	udiv	r0, r5, ip
 800049e:	fb0c 5510 	mls	r5, ip, r0, r5
 80004a2:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 80004a6:	fb00 f808 	mul.w	r8, r0, r8
 80004aa:	45a0      	cmp	r8, r4
 80004ac:	d907      	bls.n	80004be <__udivmoddi4+0x26e>
 80004ae:	18e4      	adds	r4, r4, r3
 80004b0:	f100 35ff 	add.w	r5, r0, #4294967295
 80004b4:	d229      	bcs.n	800050a <__udivmoddi4+0x2ba>
 80004b6:	45a0      	cmp	r8, r4
 80004b8:	d927      	bls.n	800050a <__udivmoddi4+0x2ba>
 80004ba:	3802      	subs	r0, #2
 80004bc:	441c      	add	r4, r3
 80004be:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004c2:	eba4 0408 	sub.w	r4, r4, r8
 80004c6:	fba0 8902 	umull	r8, r9, r0, r2
 80004ca:	454c      	cmp	r4, r9
 80004cc:	46c6      	mov	lr, r8
 80004ce:	464d      	mov	r5, r9
 80004d0:	d315      	bcc.n	80004fe <__udivmoddi4+0x2ae>
 80004d2:	d012      	beq.n	80004fa <__udivmoddi4+0x2aa>
 80004d4:	b156      	cbz	r6, 80004ec <__udivmoddi4+0x29c>
 80004d6:	ebba 030e 	subs.w	r3, sl, lr
 80004da:	eb64 0405 	sbc.w	r4, r4, r5
 80004de:	fa04 f707 	lsl.w	r7, r4, r7
 80004e2:	40cb      	lsrs	r3, r1
 80004e4:	431f      	orrs	r7, r3
 80004e6:	40cc      	lsrs	r4, r1
 80004e8:	6037      	str	r7, [r6, #0]
 80004ea:	6074      	str	r4, [r6, #4]
 80004ec:	2100      	movs	r1, #0
 80004ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004f2:	4618      	mov	r0, r3
 80004f4:	e6f8      	b.n	80002e8 <__udivmoddi4+0x98>
 80004f6:	4690      	mov	r8, r2
 80004f8:	e6e0      	b.n	80002bc <__udivmoddi4+0x6c>
 80004fa:	45c2      	cmp	sl, r8
 80004fc:	d2ea      	bcs.n	80004d4 <__udivmoddi4+0x284>
 80004fe:	ebb8 0e02 	subs.w	lr, r8, r2
 8000502:	eb69 0503 	sbc.w	r5, r9, r3
 8000506:	3801      	subs	r0, #1
 8000508:	e7e4      	b.n	80004d4 <__udivmoddi4+0x284>
 800050a:	4628      	mov	r0, r5
 800050c:	e7d7      	b.n	80004be <__udivmoddi4+0x26e>
 800050e:	4640      	mov	r0, r8
 8000510:	e791      	b.n	8000436 <__udivmoddi4+0x1e6>
 8000512:	4681      	mov	r9, r0
 8000514:	e7be      	b.n	8000494 <__udivmoddi4+0x244>
 8000516:	4601      	mov	r1, r0
 8000518:	e778      	b.n	800040c <__udivmoddi4+0x1bc>
 800051a:	3802      	subs	r0, #2
 800051c:	443c      	add	r4, r7
 800051e:	e745      	b.n	80003ac <__udivmoddi4+0x15c>
 8000520:	4608      	mov	r0, r1
 8000522:	e708      	b.n	8000336 <__udivmoddi4+0xe6>
 8000524:	f1a8 0802 	sub.w	r8, r8, #2
 8000528:	443d      	add	r5, r7
 800052a:	e72b      	b.n	8000384 <__udivmoddi4+0x134>

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000530:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000532:	4b0e      	ldr	r3, [pc, #56]	; (800056c <HAL_InitTick+0x3c>)
{
 8000534:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000536:	4a0e      	ldr	r2, [pc, #56]	; (8000570 <HAL_InitTick+0x40>)
 8000538:	7818      	ldrb	r0, [r3, #0]
 800053a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800053e:	fbb3 f3f0 	udiv	r3, r3, r0
 8000542:	6810      	ldr	r0, [r2, #0]
 8000544:	fbb0 f0f3 	udiv	r0, r0, r3
 8000548:	f000 f890 	bl	800066c <HAL_SYSTICK_Config>
 800054c:	4604      	mov	r4, r0
 800054e:	b958      	cbnz	r0, 8000568 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000550:	2d0f      	cmp	r5, #15
 8000552:	d809      	bhi.n	8000568 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000554:	4602      	mov	r2, r0
 8000556:	4629      	mov	r1, r5
 8000558:	f04f 30ff 	mov.w	r0, #4294967295
 800055c:	f000 f84e 	bl	80005fc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000560:	4b04      	ldr	r3, [pc, #16]	; (8000574 <HAL_InitTick+0x44>)
 8000562:	4620      	mov	r0, r4
 8000564:	601d      	str	r5, [r3, #0]
 8000566:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000568:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800056a:	bd38      	pop	{r3, r4, r5, pc}
 800056c:	20000000 	.word	0x20000000
 8000570:	20000008 	.word	0x20000008
 8000574:	20000004 	.word	0x20000004

08000578 <HAL_Init>:
{
 8000578:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800057a:	2003      	movs	r0, #3
 800057c:	f000 f82c 	bl	80005d8 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000580:	2000      	movs	r0, #0
 8000582:	f7ff ffd5 	bl	8000530 <HAL_InitTick>
  HAL_MspInit();
 8000586:	f001 ffbf 	bl	8002508 <HAL_MspInit>
}
 800058a:	2000      	movs	r0, #0
 800058c:	bd08      	pop	{r3, pc}
	...

08000590 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000590:	4a03      	ldr	r2, [pc, #12]	; (80005a0 <HAL_IncTick+0x10>)
 8000592:	4b04      	ldr	r3, [pc, #16]	; (80005a4 <HAL_IncTick+0x14>)
 8000594:	6811      	ldr	r1, [r2, #0]
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	440b      	add	r3, r1
 800059a:	6013      	str	r3, [r2, #0]
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop
 80005a0:	20000028 	.word	0x20000028
 80005a4:	20000000 	.word	0x20000000

080005a8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80005a8:	4b01      	ldr	r3, [pc, #4]	; (80005b0 <HAL_GetTick+0x8>)
 80005aa:	6818      	ldr	r0, [r3, #0]
}
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop
 80005b0:	20000028 	.word	0x20000028

080005b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005b4:	b538      	push	{r3, r4, r5, lr}
 80005b6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80005b8:	f7ff fff6 	bl	80005a8 <HAL_GetTick>
 80005bc:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005be:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80005c0:	bf1e      	ittt	ne
 80005c2:	4b04      	ldrne	r3, [pc, #16]	; (80005d4 <HAL_Delay+0x20>)
 80005c4:	781b      	ldrbne	r3, [r3, #0]
 80005c6:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80005c8:	f7ff ffee 	bl	80005a8 <HAL_GetTick>
 80005cc:	1b40      	subs	r0, r0, r5
 80005ce:	4284      	cmp	r4, r0
 80005d0:	d8fa      	bhi.n	80005c8 <HAL_Delay+0x14>
  {
  }
}
 80005d2:	bd38      	pop	{r3, r4, r5, pc}
 80005d4:	20000000 	.word	0x20000000

080005d8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005d8:	4a07      	ldr	r2, [pc, #28]	; (80005f8 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80005da:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005dc:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80005de:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005e2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80005e6:	041b      	lsls	r3, r3, #16
 80005e8:	0c1b      	lsrs	r3, r3, #16
 80005ea:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80005ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80005f2:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80005f4:	60d3      	str	r3, [r2, #12]
 80005f6:	4770      	bx	lr
 80005f8:	e000ed00 	.word	0xe000ed00

080005fc <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005fc:	4b19      	ldr	r3, [pc, #100]	; (8000664 <HAL_NVIC_SetPriority+0x68>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80005fe:	b530      	push	{r4, r5, lr}
 8000600:	68dc      	ldr	r4, [r3, #12]
 8000602:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000606:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800060a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800060c:	2b04      	cmp	r3, #4
 800060e:	bf28      	it	cs
 8000610:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000612:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000614:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000618:	bf8c      	ite	hi
 800061a:	3c03      	subhi	r4, #3
 800061c:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800061e:	fa05 f303 	lsl.w	r3, r5, r3
  if ((int32_t)(IRQn) < 0)
 8000622:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000624:	f103 33ff 	add.w	r3, r3, #4294967295
 8000628:	ea01 0103 	and.w	r1, r1, r3
 800062c:	fa01 f104 	lsl.w	r1, r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000630:	fa05 f404 	lsl.w	r4, r5, r4
 8000634:	f104 34ff 	add.w	r4, r4, #4294967295
 8000638:	ea02 0204 	and.w	r2, r2, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800063c:	ea42 0201 	orr.w	r2, r2, r1
 8000640:	ea4f 1202 	mov.w	r2, r2, lsl #4
  if ((int32_t)(IRQn) < 0)
 8000644:	da05      	bge.n	8000652 <HAL_NVIC_SetPriority+0x56>
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000646:	f000 000f 	and.w	r0, r0, #15
 800064a:	b2d2      	uxtb	r2, r2
 800064c:	4b06      	ldr	r3, [pc, #24]	; (8000668 <HAL_NVIC_SetPriority+0x6c>)
 800064e:	541a      	strb	r2, [r3, r0]
 8000650:	bd30      	pop	{r4, r5, pc}
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000652:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000656:	b2d2      	uxtb	r2, r2
 8000658:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 800065c:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
 8000660:	bd30      	pop	{r4, r5, pc}
 8000662:	bf00      	nop
 8000664:	e000ed00 	.word	0xe000ed00
 8000668:	e000ed14 	.word	0xe000ed14

0800066c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800066c:	3801      	subs	r0, #1
 800066e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000672:	d20a      	bcs.n	800068a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000674:	4b06      	ldr	r3, [pc, #24]	; (8000690 <HAL_SYSTICK_Config+0x24>)
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000676:	21f0      	movs	r1, #240	; 0xf0
 8000678:	4a06      	ldr	r2, [pc, #24]	; (8000694 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800067a:	6058      	str	r0, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800067c:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800067e:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000682:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000684:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000686:	601a      	str	r2, [r3, #0]
 8000688:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800068a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop
 8000690:	e000e010 	.word	0xe000e010
 8000694:	e000ed00 	.word	0xe000ed00

08000698 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800069c:	680b      	ldr	r3, [r1, #0]
{
 800069e:	b085      	sub	sp, #20
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006a0:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800084c <HAL_GPIO_Init+0x1b4>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006a4:	9301      	str	r3, [sp, #4]
  for(position = 0; position < GPIO_NUMBER; position++)
 80006a6:	2300      	movs	r3, #0
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80006a8:	4a66      	ldr	r2, [pc, #408]	; (8000844 <HAL_GPIO_Init+0x1ac>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80006aa:	f8df 91a4 	ldr.w	r9, [pc, #420]	; 8000850 <HAL_GPIO_Init+0x1b8>
    ioposition = ((uint32_t)0x01) << position;
 80006ae:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006b2:	9c01      	ldr	r4, [sp, #4]
    ioposition = ((uint32_t)0x01) << position;
 80006b4:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006b8:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 80006bc:	45b6      	cmp	lr, r6
 80006be:	f040 80ab 	bne.w	8000818 <HAL_GPIO_Init+0x180>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80006c2:	684c      	ldr	r4, [r1, #4]
 80006c4:	f024 0710 	bic.w	r7, r4, #16
 80006c8:	2f02      	cmp	r7, #2
 80006ca:	d116      	bne.n	80006fa <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3];
 80006cc:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80006d0:	f003 0b07 	and.w	fp, r3, #7
 80006d4:	f04f 0c0f 	mov.w	ip, #15
 80006d8:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 80006dc:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3];
 80006e0:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80006e4:	fa0c fc0b 	lsl.w	ip, ip, fp
 80006e8:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80006ec:	690d      	ldr	r5, [r1, #16]
 80006ee:	fa05 f50b 	lsl.w	r5, r5, fp
 80006f2:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3] = temp;
 80006f6:	f8ca 5020 	str.w	r5, [sl, #32]
 80006fa:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80006fe:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8000700:	f8d0 b000 	ldr.w	fp, [r0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000704:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000708:	fa05 f50a 	lsl.w	r5, r5, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800070c:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800070e:	fa0c fc0a 	lsl.w	ip, ip, sl
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000712:	43ed      	mvns	r5, r5
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000714:	2f01      	cmp	r7, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000716:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800071a:	ea4c 0c0b 	orr.w	ip, ip, fp
      GPIOx->MODER = temp;
 800071e:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000722:	d811      	bhi.n	8000748 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8000724:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000726:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2));
 800072a:	68cf      	ldr	r7, [r1, #12]
 800072c:	fa07 fc0a 	lsl.w	ip, r7, sl
 8000730:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8000734:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000736:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000738:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800073c:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8000740:	409f      	lsls	r7, r3
 8000742:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8000746:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000748:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800074a:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800074c:	688f      	ldr	r7, [r1, #8]
 800074e:	fa07 f70a 	lsl.w	r7, r7, sl
 8000752:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8000754:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000756:	00e5      	lsls	r5, r4, #3
 8000758:	d55e      	bpl.n	8000818 <HAL_GPIO_Init+0x180>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800075a:	f8d8 5044 	ldr.w	r5, [r8, #68]	; 0x44
 800075e:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000762:	f003 0e03 	and.w	lr, r3, #3
 8000766:	f04f 0c0f 	mov.w	ip, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800076a:	f445 4580 	orr.w	r5, r5, #16384	; 0x4000
 800076e:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000772:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000776:	f8c8 5044 	str.w	r5, [r8, #68]	; 0x44
 800077a:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
 800077e:	f8d8 5044 	ldr.w	r5, [r8, #68]	; 0x44
 8000782:	f405 4580 	and.w	r5, r5, #16384	; 0x4000
 8000786:	9503      	str	r5, [sp, #12]
 8000788:	9d03      	ldr	r5, [sp, #12]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800078a:	fa0c f50e 	lsl.w	r5, ip, lr
        temp = SYSCFG->EXTICR[position >> 2];
 800078e:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000792:	ea2a 0c05 	bic.w	ip, sl, r5
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000796:	4d2c      	ldr	r5, [pc, #176]	; (8000848 <HAL_GPIO_Init+0x1b0>)
 8000798:	42a8      	cmp	r0, r5
 800079a:	d044      	beq.n	8000826 <HAL_GPIO_Init+0x18e>
 800079c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007a0:	42a8      	cmp	r0, r5
 80007a2:	d042      	beq.n	800082a <HAL_GPIO_Init+0x192>
 80007a4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007a8:	42a8      	cmp	r0, r5
 80007aa:	d040      	beq.n	800082e <HAL_GPIO_Init+0x196>
 80007ac:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007b0:	42a8      	cmp	r0, r5
 80007b2:	d03e      	beq.n	8000832 <HAL_GPIO_Init+0x19a>
 80007b4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007b8:	42a8      	cmp	r0, r5
 80007ba:	d03c      	beq.n	8000836 <HAL_GPIO_Init+0x19e>
 80007bc:	4548      	cmp	r0, r9
 80007be:	d03c      	beq.n	800083a <HAL_GPIO_Init+0x1a2>
 80007c0:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80007c4:	42a8      	cmp	r0, r5
 80007c6:	d03a      	beq.n	800083e <HAL_GPIO_Init+0x1a6>
 80007c8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007cc:	42a8      	cmp	r0, r5
 80007ce:	bf14      	ite	ne
 80007d0:	2508      	movne	r5, #8
 80007d2:	2507      	moveq	r5, #7
 80007d4:	fa05 f50e 	lsl.w	r5, r5, lr
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80007d8:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80007dc:	ea45 050c 	orr.w	r5, r5, ip
        SYSCFG->EXTICR[position >> 2] = temp;
 80007e0:	60bd      	str	r5, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
 80007e2:	ea6f 0706 	mvn.w	r7, r6
        temp = EXTI->IMR;
 80007e6:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80007e8:	bf0c      	ite	eq
 80007ea:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80007ec:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80007ee:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        EXTI->IMR = temp;
 80007f2:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 80007f4:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 80007f6:	bf0c      	ite	eq
 80007f8:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80007fa:	4335      	orrne	r5, r6
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80007fc:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        EXTI->EMR = temp;
 8000800:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 8000802:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8000804:	bf0c      	ite	eq
 8000806:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000808:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800080a:	02a4      	lsls	r4, r4, #10
        EXTI->RTSR = temp;
 800080c:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 800080e:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 8000810:	bf54      	ite	pl
 8000812:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8000814:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8000816:	60d5      	str	r5, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000818:	3301      	adds	r3, #1
 800081a:	2b10      	cmp	r3, #16
 800081c:	f47f af47 	bne.w	80006ae <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8000820:	b005      	add	sp, #20
 8000822:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000826:	2500      	movs	r5, #0
 8000828:	e7d4      	b.n	80007d4 <HAL_GPIO_Init+0x13c>
 800082a:	2501      	movs	r5, #1
 800082c:	e7d2      	b.n	80007d4 <HAL_GPIO_Init+0x13c>
 800082e:	2502      	movs	r5, #2
 8000830:	e7d0      	b.n	80007d4 <HAL_GPIO_Init+0x13c>
 8000832:	2503      	movs	r5, #3
 8000834:	e7ce      	b.n	80007d4 <HAL_GPIO_Init+0x13c>
 8000836:	2504      	movs	r5, #4
 8000838:	e7cc      	b.n	80007d4 <HAL_GPIO_Init+0x13c>
 800083a:	2505      	movs	r5, #5
 800083c:	e7ca      	b.n	80007d4 <HAL_GPIO_Init+0x13c>
 800083e:	2506      	movs	r5, #6
 8000840:	e7c8      	b.n	80007d4 <HAL_GPIO_Init+0x13c>
 8000842:	bf00      	nop
 8000844:	40013c00 	.word	0x40013c00
 8000848:	40020000 	.word	0x40020000
 800084c:	40023800 	.word	0x40023800
 8000850:	40021400 	.word	0x40021400

08000854 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000854:	b10a      	cbz	r2, 800085a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8000856:	6181      	str	r1, [r0, #24]
 8000858:	4770      	bx	lr
 800085a:	0409      	lsls	r1, r1, #16
 800085c:	e7fb      	b.n	8000856 <HAL_GPIO_WritePin+0x2>

0800085e <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800085e:	b510      	push	{r4, lr}
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000860:	4604      	mov	r4, r0
 8000862:	2800      	cmp	r0, #0
 8000864:	d04a      	beq.n	80008fc <HAL_I2C_Init+0x9e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000866:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800086a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800086e:	b91b      	cbnz	r3, 8000878 <HAL_I2C_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000870:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000874:	f001 fe60 	bl	8002538 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000878:	2324      	movs	r3, #36	; 0x24
  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800087a:	68e1      	ldr	r1, [r4, #12]
  hi2c->State = HAL_I2C_STATE_BUSY;
 800087c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000880:	2901      	cmp	r1, #1
  __HAL_I2C_DISABLE(hi2c);
 8000882:	6823      	ldr	r3, [r4, #0]
 8000884:	681a      	ldr	r2, [r3, #0]
 8000886:	f022 0201 	bic.w	r2, r2, #1
 800088a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800088c:	6862      	ldr	r2, [r4, #4]
 800088e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000892:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000894:	689a      	ldr	r2, [r3, #8]
 8000896:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800089a:	609a      	str	r2, [r3, #8]
 800089c:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800089e:	d124      	bne.n	80008ea <HAL_I2C_Init+0x8c>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80008a0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80008a4:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80008a6:	685a      	ldr	r2, [r3, #4]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80008a8:	2000      	movs	r0, #0
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80008aa:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80008ac:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80008b0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80008b4:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80008b6:	68da      	ldr	r2, [r3, #12]
 80008b8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80008bc:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80008be:	6922      	ldr	r2, [r4, #16]
 80008c0:	430a      	orrs	r2, r1
 80008c2:	69a1      	ldr	r1, [r4, #24]
 80008c4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80008c8:	6a21      	ldr	r1, [r4, #32]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80008ca:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80008cc:	69e2      	ldr	r2, [r4, #28]
 80008ce:	430a      	orrs	r2, r1
 80008d0:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 80008d2:	681a      	ldr	r2, [r3, #0]
 80008d4:	f042 0201 	orr.w	r2, r2, #1
 80008d8:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 80008da:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80008dc:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80008de:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80008e2:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80008e4:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42

  return HAL_OK;
 80008e8:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80008ea:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80008ee:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80008f0:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80008f2:	d1d8      	bne.n	80008a6 <HAL_I2C_Init+0x48>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80008f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80008f8:	605a      	str	r2, [r3, #4]
 80008fa:	e7d4      	b.n	80008a6 <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 80008fc:	2001      	movs	r0, #1
}
 80008fe:	bd10      	pop	{r4, pc}

08000900 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000900:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8000904:	b2d2      	uxtb	r2, r2
 8000906:	2a20      	cmp	r2, #32
{
 8000908:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 800090a:	d11d      	bne.n	8000948 <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800090c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8000910:	2b01      	cmp	r3, #1
 8000912:	d019      	beq.n	8000948 <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000914:	2324      	movs	r3, #36	; 0x24
 8000916:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800091a:	6803      	ldr	r3, [r0, #0]
 800091c:	681c      	ldr	r4, [r3, #0]
 800091e:	f024 0401 	bic.w	r4, r4, #1
 8000922:	601c      	str	r4, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8000924:	681c      	ldr	r4, [r3, #0]
 8000926:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 800092a:	601c      	str	r4, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800092c:	681c      	ldr	r4, [r3, #0]
 800092e:	4321      	orrs	r1, r4
 8000930:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000932:	6819      	ldr	r1, [r3, #0]
 8000934:	f041 0101 	orr.w	r1, r1, #1
 8000938:	6019      	str	r1, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800093a:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 800093c:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8000940:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8000944:	4618      	mov	r0, r3
 8000946:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 8000948:	2002      	movs	r0, #2
  }
}
 800094a:	bd10      	pop	{r4, pc}

0800094c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800094c:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800094e:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 8000952:	b2e4      	uxtb	r4, r4
 8000954:	2c20      	cmp	r4, #32
 8000956:	d11c      	bne.n	8000992 <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000958:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800095c:	2b01      	cmp	r3, #1
 800095e:	d018      	beq.n	8000992 <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000960:	2324      	movs	r3, #36	; 0x24
 8000962:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000966:	6803      	ldr	r3, [r0, #0]
 8000968:	681a      	ldr	r2, [r3, #0]
 800096a:	f022 0201 	bic.w	r2, r2, #1
 800096e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8000970:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8000972:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8000976:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800097a:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800097c:	681a      	ldr	r2, [r3, #0]
 800097e:	f042 0201 	orr.w	r2, r2, #1
 8000982:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000984:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8000986:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800098a:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 800098e:	4618      	mov	r0, r3
 8000990:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 8000992:	2002      	movs	r0, #2
  }
}
 8000994:	bd10      	pop	{r4, pc}

08000996 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000996:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint8_t i;

  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 800099a:	4604      	mov	r4, r0
{
 800099c:	b08a      	sub	sp, #40	; 0x28
  if(hpcd == NULL)
 800099e:	2800      	cmp	r0, #0
 80009a0:	d06b      	beq.n	8000a7a <HAL_PCD_Init+0xe4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if(hpcd->State == HAL_PCD_STATE_RESET)
 80009a2:	f890 33bd 	ldrb.w	r3, [r0, #957]	; 0x3bd
 80009a6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80009aa:	b91b      	cbnz	r3, 80009b4 <HAL_PCD_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80009ac:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80009b0:	f001 fe68 	bl	8002684 <HAL_PCD_MspInit>
  }

  hpcd->State = HAL_PCD_STATE_BUSY;

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80009b4:	4625      	mov	r5, r4
  hpcd->State = HAL_PCD_STATE_BUSY;
 80009b6:	2303      	movs	r3, #3

  /*Init the Core (common init.) */
  (void)USB_CoreInit(hpcd->Instance, hpcd->Init);
 80009b8:	466e      	mov	r6, sp
 80009ba:	f104 0804 	add.w	r8, r4, #4
  __HAL_PCD_DISABLE(hpcd);
 80009be:	f855 0b10 	ldr.w	r0, [r5], #16
  hpcd->State = HAL_PCD_STATE_BUSY;
 80009c2:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
  __HAL_PCD_DISABLE(hpcd);
 80009c6:	f001 faec 	bl	8001fa2 <USB_DisableGlobalInt>
  (void)USB_CoreInit(hpcd->Instance, hpcd->Init);
 80009ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009cc:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80009ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009d0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80009d2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80009d6:	f104 0510 	add.w	r5, r4, #16
 80009da:	e886 0003 	stmia.w	r6, {r0, r1}
 80009de:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 80009e2:	6820      	ldr	r0, [r4, #0]

  /* Init endpoints structures */
  for (i = 0U; i < 15U; i++)
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80009e4:	2601      	movs	r6, #1
  (void)USB_CoreInit(hpcd->Instance, hpcd->Init);
 80009e6:	f001 faa1 	bl	8001f2c <USB_CoreInit>
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80009ea:	2100      	movs	r1, #0
 80009ec:	6820      	ldr	r0, [r4, #0]
 80009ee:	f001 fade 	bl	8001fae <USB_SetCurrentMode>
 80009f2:	2100      	movs	r1, #0
 80009f4:	4622      	mov	r2, r4
 80009f6:	4623      	mov	r3, r4
    hpcd->IN_ep[i].num = i;
    hpcd->IN_ep[i].tx_fifo_num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80009f8:	4608      	mov	r0, r1
    hpcd->IN_ep[i].num = i;
 80009fa:	f883 103c 	strb.w	r1, [r3, #60]	; 0x3c
 80009fe:	331c      	adds	r3, #28
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000a00:	84d9      	strh	r1, [r3, #38]	; 0x26
 8000a02:	3101      	adds	r1, #1
    hpcd->IN_ep[i].is_in = 1U;
 8000a04:	f883 6021 	strb.w	r6, [r3, #33]	; 0x21
  for (i = 0U; i < 15U; i++)
 8000a08:	290f      	cmp	r1, #15
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000a0a:	f883 0023 	strb.w	r0, [r3, #35]	; 0x23
    hpcd->IN_ep[i].maxpacket = 0U;
 8000a0e:	6298      	str	r0, [r3, #40]	; 0x28
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000a10:	62d8      	str	r0, [r3, #44]	; 0x2c
    hpcd->IN_ep[i].xfer_len = 0U;
 8000a12:	6358      	str	r0, [r3, #52]	; 0x34
  for (i = 0U; i < 15U; i++)
 8000a14:	d1f1      	bne.n	80009fa <HAL_PCD_Init+0x64>
 8000a16:	2300      	movs	r3, #0
  }

  for (i = 0U; i < 15U; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000a18:	461f      	mov	r7, r3
    hpcd->OUT_ep[i].num = i;
 8000a1a:	f882 31fc 	strb.w	r3, [r2, #508]	; 0x1fc
 8000a1e:	3301      	adds	r3, #1
    hpcd->OUT_ep[i].is_in = 0U;
 8000a20:	f882 71fd 	strb.w	r7, [r2, #509]	; 0x1fd
 8000a24:	321c      	adds	r2, #28
  for (i = 0U; i < 15U; i++)
 8000a26:	2b0f      	cmp	r3, #15
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000a28:	f882 71e3 	strb.w	r7, [r2, #483]	; 0x1e3
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000a2c:	f8c2 71e8 	str.w	r7, [r2, #488]	; 0x1e8
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000a30:	f8c2 71ec 	str.w	r7, [r2, #492]	; 0x1ec
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000a34:	f8c2 71f4 	str.w	r7, [r2, #500]	; 0x1f4
  for (i = 0U; i < 15U; i++)
 8000a38:	d1ef      	bne.n	8000a1a <HAL_PCD_Init+0x84>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8000a3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a3c:	466e      	mov	r6, sp
 8000a3e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000a40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a42:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000a44:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000a48:	e886 0003 	stmia.w	r6, {r0, r1}
 8000a4c:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8000a50:	6820      	ldr	r0, [r4, #0]
 8000a52:	f001 faed 	bl	8002030 <USB_DevInit>

  hpcd->USB_Address = 0U;
  hpcd->State = HAL_PCD_STATE_READY;
 8000a56:	2301      	movs	r3, #1
  hpcd->USB_Address = 0U;
 8000a58:	f884 7038 	strb.w	r7, [r4, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8000a5c:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8000a60:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000a62:	2b01      	cmp	r3, #1
 8000a64:	d102      	bne.n	8000a6c <HAL_PCD_Init+0xd6>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8000a66:	4620      	mov	r0, r4
 8000a68:	f000 f809 	bl	8000a7e <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect (hpcd->Instance);
 8000a6c:	6820      	ldr	r0, [r4, #0]
 8000a6e:	f001 fb97 	bl	80021a0 <USB_DevDisconnect>

  return HAL_OK;
 8000a72:	2000      	movs	r0, #0
}
 8000a74:	b00a      	add	sp, #40	; 0x28
 8000a76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 8000a7a:	2001      	movs	r0, #1
 8000a7c:	e7fa      	b.n	8000a74 <HAL_PCD_Init+0xde>

08000a7e <HAL_PCDEx_ActivateLPM>:
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;

  hpcd->lpm_active = 1U;
 8000a7e:	2101      	movs	r1, #1
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000a80:	6802      	ldr	r2, [r0, #0]
{
 8000a82:	4603      	mov	r3, r0
  hpcd->lpm_active = 1U;
 8000a84:	f8c0 13f8 	str.w	r1, [r0, #1016]	; 0x3f8
  hpcd->LPM_State = LPM_L0;
 8000a88:	2000      	movs	r0, #0
 8000a8a:	f883 03f0 	strb.w	r0, [r3, #1008]	; 0x3f0
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8000a8e:	6993      	ldr	r3, [r2, #24]
 8000a90:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000a94:	6193      	str	r3, [r2, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8000a96:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8000a98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a9c:	f043 0303 	orr.w	r3, r3, #3
 8000aa0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
}
 8000aa2:	4770      	bx	lr

08000aa4 <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000aa4:	4a02      	ldr	r2, [pc, #8]	; (8000ab0 <HAL_PWR_EnableBkUpAccess+0xc>)
 8000aa6:	6813      	ldr	r3, [r2, #0]
 8000aa8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000aac:	6013      	str	r3, [r2, #0]
 8000aae:	4770      	bx	lr
 8000ab0:	40007000 	.word	0x40007000

08000ab4 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8000ab4:	4b19      	ldr	r3, [pc, #100]	; (8000b1c <HAL_PWREx_EnableOverDrive+0x68>)
{
 8000ab6:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ab8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8000aba:	4c19      	ldr	r4, [pc, #100]	; (8000b20 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8000abc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000ac0:	641a      	str	r2, [r3, #64]	; 0x40
 8000ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ac8:	9301      	str	r3, [sp, #4]
 8000aca:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8000acc:	6823      	ldr	r3, [r4, #0]
 8000ace:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ad2:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000ad4:	f7ff fd68 	bl	80005a8 <HAL_GetTick>
 8000ad8:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000ada:	6863      	ldr	r3, [r4, #4]
 8000adc:	03da      	lsls	r2, r3, #15
 8000ade:	d50c      	bpl.n	8000afa <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8000ae0:	6823      	ldr	r3, [r4, #0]
 8000ae2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ae6:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000ae8:	f7ff fd5e 	bl	80005a8 <HAL_GetTick>

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000aec:	4c0c      	ldr	r4, [pc, #48]	; (8000b20 <HAL_PWREx_EnableOverDrive+0x6c>)
  tickstart = HAL_GetTick();
 8000aee:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000af0:	6863      	ldr	r3, [r4, #4]
 8000af2:	039b      	lsls	r3, r3, #14
 8000af4:	d50a      	bpl.n	8000b0c <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8000af6:	2000      	movs	r0, #0
 8000af8:	e006      	b.n	8000b08 <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000afa:	f7ff fd55 	bl	80005a8 <HAL_GetTick>
 8000afe:	1b40      	subs	r0, r0, r5
 8000b00:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000b04:	d9e9      	bls.n	8000ada <HAL_PWREx_EnableOverDrive+0x26>
      return HAL_TIMEOUT;
 8000b06:	2003      	movs	r0, #3
}
 8000b08:	b003      	add	sp, #12
 8000b0a:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000b0c:	f7ff fd4c 	bl	80005a8 <HAL_GetTick>
 8000b10:	1b40      	subs	r0, r0, r5
 8000b12:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000b16:	d9eb      	bls.n	8000af0 <HAL_PWREx_EnableOverDrive+0x3c>
 8000b18:	e7f5      	b.n	8000b06 <HAL_PWREx_EnableOverDrive+0x52>
 8000b1a:	bf00      	nop
 8000b1c:	40023800 	.word	0x40023800
 8000b20:	40007000 	.word	0x40007000

08000b24 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b24:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000b28:	4604      	mov	r4, r0
 8000b2a:	b918      	cbnz	r0, 8000b34 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8000b2c:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8000b2e:	b002      	add	sp, #8
 8000b30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b34:	6803      	ldr	r3, [r0, #0]
 8000b36:	07d8      	lsls	r0, r3, #31
 8000b38:	d410      	bmi.n	8000b5c <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000b3a:	6823      	ldr	r3, [r4, #0]
 8000b3c:	0799      	lsls	r1, r3, #30
 8000b3e:	d45e      	bmi.n	8000bfe <HAL_RCC_OscConfig+0xda>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000b40:	6823      	ldr	r3, [r4, #0]
 8000b42:	0719      	lsls	r1, r3, #28
 8000b44:	f100 80a3 	bmi.w	8000c8e <HAL_RCC_OscConfig+0x16a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000b48:	6823      	ldr	r3, [r4, #0]
 8000b4a:	075a      	lsls	r2, r3, #29
 8000b4c:	f100 80c4 	bmi.w	8000cd8 <HAL_RCC_OscConfig+0x1b4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000b50:	69a2      	ldr	r2, [r4, #24]
 8000b52:	2a00      	cmp	r2, #0
 8000b54:	f040 812e 	bne.w	8000db4 <HAL_RCC_OscConfig+0x290>
  return HAL_OK;
 8000b58:	2000      	movs	r0, #0
 8000b5a:	e7e8      	b.n	8000b2e <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000b5c:	4b93      	ldr	r3, [pc, #588]	; (8000dac <HAL_RCC_OscConfig+0x288>)
 8000b5e:	689a      	ldr	r2, [r3, #8]
 8000b60:	f002 020c 	and.w	r2, r2, #12
 8000b64:	2a04      	cmp	r2, #4
 8000b66:	d007      	beq.n	8000b78 <HAL_RCC_OscConfig+0x54>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000b68:	689a      	ldr	r2, [r3, #8]
 8000b6a:	f002 020c 	and.w	r2, r2, #12
 8000b6e:	2a08      	cmp	r2, #8
 8000b70:	d10a      	bne.n	8000b88 <HAL_RCC_OscConfig+0x64>
 8000b72:	685b      	ldr	r3, [r3, #4]
 8000b74:	025a      	lsls	r2, r3, #9
 8000b76:	d507      	bpl.n	8000b88 <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b78:	4b8c      	ldr	r3, [pc, #560]	; (8000dac <HAL_RCC_OscConfig+0x288>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	039b      	lsls	r3, r3, #14
 8000b7e:	d5dc      	bpl.n	8000b3a <HAL_RCC_OscConfig+0x16>
 8000b80:	6863      	ldr	r3, [r4, #4]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d1d9      	bne.n	8000b3a <HAL_RCC_OscConfig+0x16>
 8000b86:	e7d1      	b.n	8000b2c <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b88:	6863      	ldr	r3, [r4, #4]
 8000b8a:	4d88      	ldr	r5, [pc, #544]	; (8000dac <HAL_RCC_OscConfig+0x288>)
 8000b8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b90:	d111      	bne.n	8000bb6 <HAL_RCC_OscConfig+0x92>
 8000b92:	682b      	ldr	r3, [r5, #0]
 8000b94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b98:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000b9a:	f7ff fd05 	bl	80005a8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b9e:	4d83      	ldr	r5, [pc, #524]	; (8000dac <HAL_RCC_OscConfig+0x288>)
        tickstart = HAL_GetTick();
 8000ba0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ba2:	682b      	ldr	r3, [r5, #0]
 8000ba4:	039f      	lsls	r7, r3, #14
 8000ba6:	d4c8      	bmi.n	8000b3a <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ba8:	f7ff fcfe 	bl	80005a8 <HAL_GetTick>
 8000bac:	1b80      	subs	r0, r0, r6
 8000bae:	2864      	cmp	r0, #100	; 0x64
 8000bb0:	d9f7      	bls.n	8000ba2 <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 8000bb2:	2003      	movs	r0, #3
 8000bb4:	e7bb      	b.n	8000b2e <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000bb6:	b99b      	cbnz	r3, 8000be0 <HAL_RCC_OscConfig+0xbc>
 8000bb8:	682b      	ldr	r3, [r5, #0]
 8000bba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000bbe:	602b      	str	r3, [r5, #0]
 8000bc0:	682b      	ldr	r3, [r5, #0]
 8000bc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000bc6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000bc8:	f7ff fcee 	bl	80005a8 <HAL_GetTick>
 8000bcc:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000bce:	682b      	ldr	r3, [r5, #0]
 8000bd0:	0398      	lsls	r0, r3, #14
 8000bd2:	d5b2      	bpl.n	8000b3a <HAL_RCC_OscConfig+0x16>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000bd4:	f7ff fce8 	bl	80005a8 <HAL_GetTick>
 8000bd8:	1b80      	subs	r0, r0, r6
 8000bda:	2864      	cmp	r0, #100	; 0x64
 8000bdc:	d9f7      	bls.n	8000bce <HAL_RCC_OscConfig+0xaa>
 8000bde:	e7e8      	b.n	8000bb2 <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000be0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000be4:	682b      	ldr	r3, [r5, #0]
 8000be6:	d103      	bne.n	8000bf0 <HAL_RCC_OscConfig+0xcc>
 8000be8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000bec:	602b      	str	r3, [r5, #0]
 8000bee:	e7d0      	b.n	8000b92 <HAL_RCC_OscConfig+0x6e>
 8000bf0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000bf4:	602b      	str	r3, [r5, #0]
 8000bf6:	682b      	ldr	r3, [r5, #0]
 8000bf8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000bfc:	e7cc      	b.n	8000b98 <HAL_RCC_OscConfig+0x74>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000bfe:	4b6b      	ldr	r3, [pc, #428]	; (8000dac <HAL_RCC_OscConfig+0x288>)
 8000c00:	689a      	ldr	r2, [r3, #8]
 8000c02:	f012 0f0c 	tst.w	r2, #12
 8000c06:	d007      	beq.n	8000c18 <HAL_RCC_OscConfig+0xf4>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000c08:	689a      	ldr	r2, [r3, #8]
 8000c0a:	f002 020c 	and.w	r2, r2, #12
 8000c0e:	2a08      	cmp	r2, #8
 8000c10:	d111      	bne.n	8000c36 <HAL_RCC_OscConfig+0x112>
 8000c12:	685b      	ldr	r3, [r3, #4]
 8000c14:	0259      	lsls	r1, r3, #9
 8000c16:	d40e      	bmi.n	8000c36 <HAL_RCC_OscConfig+0x112>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c18:	4b64      	ldr	r3, [pc, #400]	; (8000dac <HAL_RCC_OscConfig+0x288>)
 8000c1a:	681a      	ldr	r2, [r3, #0]
 8000c1c:	0792      	lsls	r2, r2, #30
 8000c1e:	d502      	bpl.n	8000c26 <HAL_RCC_OscConfig+0x102>
 8000c20:	68e2      	ldr	r2, [r4, #12]
 8000c22:	2a01      	cmp	r2, #1
 8000c24:	d182      	bne.n	8000b2c <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c26:	681a      	ldr	r2, [r3, #0]
 8000c28:	6921      	ldr	r1, [r4, #16]
 8000c2a:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8000c2e:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8000c32:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c34:	e784      	b.n	8000b40 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000c36:	68e3      	ldr	r3, [r4, #12]
 8000c38:	4d5c      	ldr	r5, [pc, #368]	; (8000dac <HAL_RCC_OscConfig+0x288>)
 8000c3a:	b1bb      	cbz	r3, 8000c6c <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_HSI_ENABLE();
 8000c3c:	682b      	ldr	r3, [r5, #0]
 8000c3e:	f043 0301 	orr.w	r3, r3, #1
 8000c42:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000c44:	f7ff fcb0 	bl	80005a8 <HAL_GetTick>
 8000c48:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c4a:	682b      	ldr	r3, [r5, #0]
 8000c4c:	079f      	lsls	r7, r3, #30
 8000c4e:	d507      	bpl.n	8000c60 <HAL_RCC_OscConfig+0x13c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c50:	682b      	ldr	r3, [r5, #0]
 8000c52:	6922      	ldr	r2, [r4, #16]
 8000c54:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000c58:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000c5c:	602b      	str	r3, [r5, #0]
 8000c5e:	e76f      	b.n	8000b40 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c60:	f7ff fca2 	bl	80005a8 <HAL_GetTick>
 8000c64:	1b80      	subs	r0, r0, r6
 8000c66:	2802      	cmp	r0, #2
 8000c68:	d9ef      	bls.n	8000c4a <HAL_RCC_OscConfig+0x126>
 8000c6a:	e7a2      	b.n	8000bb2 <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 8000c6c:	682b      	ldr	r3, [r5, #0]
 8000c6e:	f023 0301 	bic.w	r3, r3, #1
 8000c72:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000c74:	f7ff fc98 	bl	80005a8 <HAL_GetTick>
 8000c78:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c7a:	682b      	ldr	r3, [r5, #0]
 8000c7c:	0798      	lsls	r0, r3, #30
 8000c7e:	f57f af5f 	bpl.w	8000b40 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c82:	f7ff fc91 	bl	80005a8 <HAL_GetTick>
 8000c86:	1b80      	subs	r0, r0, r6
 8000c88:	2802      	cmp	r0, #2
 8000c8a:	d9f6      	bls.n	8000c7a <HAL_RCC_OscConfig+0x156>
 8000c8c:	e791      	b.n	8000bb2 <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000c8e:	6963      	ldr	r3, [r4, #20]
 8000c90:	4d46      	ldr	r5, [pc, #280]	; (8000dac <HAL_RCC_OscConfig+0x288>)
 8000c92:	b183      	cbz	r3, 8000cb6 <HAL_RCC_OscConfig+0x192>
      __HAL_RCC_LSI_ENABLE();
 8000c94:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000c96:	f043 0301 	orr.w	r3, r3, #1
 8000c9a:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8000c9c:	f7ff fc84 	bl	80005a8 <HAL_GetTick>
 8000ca0:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ca2:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000ca4:	079b      	lsls	r3, r3, #30
 8000ca6:	f53f af4f 	bmi.w	8000b48 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000caa:	f7ff fc7d 	bl	80005a8 <HAL_GetTick>
 8000cae:	1b80      	subs	r0, r0, r6
 8000cb0:	2802      	cmp	r0, #2
 8000cb2:	d9f6      	bls.n	8000ca2 <HAL_RCC_OscConfig+0x17e>
 8000cb4:	e77d      	b.n	8000bb2 <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 8000cb6:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000cb8:	f023 0301 	bic.w	r3, r3, #1
 8000cbc:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8000cbe:	f7ff fc73 	bl	80005a8 <HAL_GetTick>
 8000cc2:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000cc4:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000cc6:	079f      	lsls	r7, r3, #30
 8000cc8:	f57f af3e 	bpl.w	8000b48 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000ccc:	f7ff fc6c 	bl	80005a8 <HAL_GetTick>
 8000cd0:	1b80      	subs	r0, r0, r6
 8000cd2:	2802      	cmp	r0, #2
 8000cd4:	d9f6      	bls.n	8000cc4 <HAL_RCC_OscConfig+0x1a0>
 8000cd6:	e76c      	b.n	8000bb2 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000cd8:	4b34      	ldr	r3, [pc, #208]	; (8000dac <HAL_RCC_OscConfig+0x288>)
 8000cda:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000cdc:	00d0      	lsls	r0, r2, #3
 8000cde:	d427      	bmi.n	8000d30 <HAL_RCC_OscConfig+0x20c>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000ce0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 8000ce2:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8000ce4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000ce8:	641a      	str	r2, [r3, #64]	; 0x40
 8000cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cf0:	9301      	str	r3, [sp, #4]
 8000cf2:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000cf4:	4d2e      	ldr	r5, [pc, #184]	; (8000db0 <HAL_RCC_OscConfig+0x28c>)
 8000cf6:	682b      	ldr	r3, [r5, #0]
 8000cf8:	05d9      	lsls	r1, r3, #23
 8000cfa:	d51b      	bpl.n	8000d34 <HAL_RCC_OscConfig+0x210>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000cfc:	68a3      	ldr	r3, [r4, #8]
 8000cfe:	4d2b      	ldr	r5, [pc, #172]	; (8000dac <HAL_RCC_OscConfig+0x288>)
 8000d00:	2b01      	cmp	r3, #1
 8000d02:	d127      	bne.n	8000d54 <HAL_RCC_OscConfig+0x230>
 8000d04:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000d06:	f043 0301 	orr.w	r3, r3, #1
 8000d0a:	672b      	str	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000d0c:	f241 3588 	movw	r5, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000d10:	f7ff fc4a 	bl	80005a8 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000d14:	4f25      	ldr	r7, [pc, #148]	; (8000dac <HAL_RCC_OscConfig+0x288>)
      tickstart = HAL_GetTick();
 8000d16:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000d18:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000d1a:	079b      	lsls	r3, r3, #30
 8000d1c:	d53f      	bpl.n	8000d9e <HAL_RCC_OscConfig+0x27a>
    if(pwrclkchanged == SET)
 8000d1e:	2e00      	cmp	r6, #0
 8000d20:	f43f af16 	beq.w	8000b50 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000d24:	4a21      	ldr	r2, [pc, #132]	; (8000dac <HAL_RCC_OscConfig+0x288>)
 8000d26:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000d28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000d2c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d2e:	e70f      	b.n	8000b50 <HAL_RCC_OscConfig+0x2c>
  FlagStatus pwrclkchanged = RESET;
 8000d30:	2600      	movs	r6, #0
 8000d32:	e7df      	b.n	8000cf4 <HAL_RCC_OscConfig+0x1d0>
      PWR->CR1 |= PWR_CR1_DBP;
 8000d34:	682b      	ldr	r3, [r5, #0]
 8000d36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d3a:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8000d3c:	f7ff fc34 	bl	80005a8 <HAL_GetTick>
 8000d40:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000d42:	682b      	ldr	r3, [r5, #0]
 8000d44:	05da      	lsls	r2, r3, #23
 8000d46:	d4d9      	bmi.n	8000cfc <HAL_RCC_OscConfig+0x1d8>
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8000d48:	f7ff fc2e 	bl	80005a8 <HAL_GetTick>
 8000d4c:	1bc0      	subs	r0, r0, r7
 8000d4e:	2864      	cmp	r0, #100	; 0x64
 8000d50:	d9f7      	bls.n	8000d42 <HAL_RCC_OscConfig+0x21e>
 8000d52:	e72e      	b.n	8000bb2 <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d54:	b9ab      	cbnz	r3, 8000d82 <HAL_RCC_OscConfig+0x25e>
 8000d56:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000d58:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d5c:	f023 0301 	bic.w	r3, r3, #1
 8000d60:	672b      	str	r3, [r5, #112]	; 0x70
 8000d62:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000d64:	f023 0304 	bic.w	r3, r3, #4
 8000d68:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8000d6a:	f7ff fc1d 	bl	80005a8 <HAL_GetTick>
 8000d6e:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000d70:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000d72:	0798      	lsls	r0, r3, #30
 8000d74:	d5d3      	bpl.n	8000d1e <HAL_RCC_OscConfig+0x1fa>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000d76:	f7ff fc17 	bl	80005a8 <HAL_GetTick>
 8000d7a:	1bc0      	subs	r0, r0, r7
 8000d7c:	4540      	cmp	r0, r8
 8000d7e:	d9f7      	bls.n	8000d70 <HAL_RCC_OscConfig+0x24c>
 8000d80:	e717      	b.n	8000bb2 <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d82:	2b05      	cmp	r3, #5
 8000d84:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000d86:	d103      	bne.n	8000d90 <HAL_RCC_OscConfig+0x26c>
 8000d88:	f043 0304 	orr.w	r3, r3, #4
 8000d8c:	672b      	str	r3, [r5, #112]	; 0x70
 8000d8e:	e7b9      	b.n	8000d04 <HAL_RCC_OscConfig+0x1e0>
 8000d90:	f023 0301 	bic.w	r3, r3, #1
 8000d94:	672b      	str	r3, [r5, #112]	; 0x70
 8000d96:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000d98:	f023 0304 	bic.w	r3, r3, #4
 8000d9c:	e7b5      	b.n	8000d0a <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000d9e:	f7ff fc03 	bl	80005a8 <HAL_GetTick>
 8000da2:	eba0 0008 	sub.w	r0, r0, r8
 8000da6:	42a8      	cmp	r0, r5
 8000da8:	d9b6      	bls.n	8000d18 <HAL_RCC_OscConfig+0x1f4>
 8000daa:	e702      	b.n	8000bb2 <HAL_RCC_OscConfig+0x8e>
 8000dac:	40023800 	.word	0x40023800
 8000db0:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000db4:	4d24      	ldr	r5, [pc, #144]	; (8000e48 <HAL_RCC_OscConfig+0x324>)
 8000db6:	68ab      	ldr	r3, [r5, #8]
 8000db8:	f003 030c 	and.w	r3, r3, #12
 8000dbc:	2b08      	cmp	r3, #8
 8000dbe:	f43f aeb5 	beq.w	8000b2c <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_PLL_DISABLE();
 8000dc2:	682b      	ldr	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000dc4:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000dc6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000dca:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000dcc:	d12e      	bne.n	8000e2c <HAL_RCC_OscConfig+0x308>
        tickstart = HAL_GetTick();
 8000dce:	f7ff fbeb 	bl	80005a8 <HAL_GetTick>
 8000dd2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000dd4:	682b      	ldr	r3, [r5, #0]
 8000dd6:	0199      	lsls	r1, r3, #6
 8000dd8:	d422      	bmi.n	8000e20 <HAL_RCC_OscConfig+0x2fc>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000dda:	6a22      	ldr	r2, [r4, #32]
 8000ddc:	69e3      	ldr	r3, [r4, #28]
 8000dde:	4313      	orrs	r3, r2
 8000de0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000de2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000de6:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000dea:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000dec:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000df0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000df2:	4c15      	ldr	r4, [pc, #84]	; (8000e48 <HAL_RCC_OscConfig+0x324>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000df4:	0852      	lsrs	r2, r2, #1
 8000df6:	3a01      	subs	r2, #1
 8000df8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dfc:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000dfe:	682b      	ldr	r3, [r5, #0]
 8000e00:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000e04:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000e06:	f7ff fbcf 	bl	80005a8 <HAL_GetTick>
 8000e0a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000e0c:	6823      	ldr	r3, [r4, #0]
 8000e0e:	019a      	lsls	r2, r3, #6
 8000e10:	f53f aea2 	bmi.w	8000b58 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000e14:	f7ff fbc8 	bl	80005a8 <HAL_GetTick>
 8000e18:	1b40      	subs	r0, r0, r5
 8000e1a:	2802      	cmp	r0, #2
 8000e1c:	d9f6      	bls.n	8000e0c <HAL_RCC_OscConfig+0x2e8>
 8000e1e:	e6c8      	b.n	8000bb2 <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000e20:	f7ff fbc2 	bl	80005a8 <HAL_GetTick>
 8000e24:	1b80      	subs	r0, r0, r6
 8000e26:	2802      	cmp	r0, #2
 8000e28:	d9d4      	bls.n	8000dd4 <HAL_RCC_OscConfig+0x2b0>
 8000e2a:	e6c2      	b.n	8000bb2 <HAL_RCC_OscConfig+0x8e>
        tickstart = HAL_GetTick();
 8000e2c:	f7ff fbbc 	bl	80005a8 <HAL_GetTick>
 8000e30:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000e32:	682b      	ldr	r3, [r5, #0]
 8000e34:	019b      	lsls	r3, r3, #6
 8000e36:	f57f ae8f 	bpl.w	8000b58 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000e3a:	f7ff fbb5 	bl	80005a8 <HAL_GetTick>
 8000e3e:	1b00      	subs	r0, r0, r4
 8000e40:	2802      	cmp	r0, #2
 8000e42:	d9f6      	bls.n	8000e32 <HAL_RCC_OscConfig+0x30e>
 8000e44:	e6b5      	b.n	8000bb2 <HAL_RCC_OscConfig+0x8e>
 8000e46:	bf00      	nop
 8000e48:	40023800 	.word	0x40023800

08000e4c <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000e4c:	4913      	ldr	r1, [pc, #76]	; (8000e9c <HAL_RCC_GetSysClockFreq+0x50>)
{
 8000e4e:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000e50:	688b      	ldr	r3, [r1, #8]
 8000e52:	f003 030c 	and.w	r3, r3, #12
 8000e56:	2b04      	cmp	r3, #4
 8000e58:	d003      	beq.n	8000e62 <HAL_RCC_GetSysClockFreq+0x16>
 8000e5a:	2b08      	cmp	r3, #8
 8000e5c:	d003      	beq.n	8000e66 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000e5e:	4810      	ldr	r0, [pc, #64]	; (8000ea0 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000e60:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8000e62:	4810      	ldr	r0, [pc, #64]	; (8000ea4 <HAL_RCC_GetSysClockFreq+0x58>)
 8000e64:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000e66:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8000e68:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000e6a:	6849      	ldr	r1, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000e6c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8000e70:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000e74:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000e78:	bf1a      	itte	ne
 8000e7a:	480a      	ldrne	r0, [pc, #40]	; (8000ea4 <HAL_RCC_GetSysClockFreq+0x58>)
 8000e7c:	2300      	movne	r3, #0
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000e7e:	4808      	ldreq	r0, [pc, #32]	; (8000ea0 <HAL_RCC_GetSysClockFreq+0x54>)
 8000e80:	fba1 0100 	umull	r0, r1, r1, r0
 8000e84:	f7ff f9cc 	bl	8000220 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8000e88:	4b04      	ldr	r3, [pc, #16]	; (8000e9c <HAL_RCC_GetSysClockFreq+0x50>)
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000e90:	3301      	adds	r3, #1
 8000e92:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8000e94:	fbb0 f0f3 	udiv	r0, r0, r3
 8000e98:	bd08      	pop	{r3, pc}
 8000e9a:	bf00      	nop
 8000e9c:	40023800 	.word	0x40023800
 8000ea0:	00f42400 	.word	0x00f42400
 8000ea4:	007a1200 	.word	0x007a1200

08000ea8 <HAL_RCC_ClockConfig>:
{
 8000ea8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000eac:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8000eae:	4604      	mov	r4, r0
 8000eb0:	b910      	cbnz	r0, 8000eb8 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000eb2:	2001      	movs	r0, #1
 8000eb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000eb8:	4a46      	ldr	r2, [pc, #280]	; (8000fd4 <HAL_RCC_ClockConfig+0x12c>)
 8000eba:	6813      	ldr	r3, [r2, #0]
 8000ebc:	f003 030f 	and.w	r3, r3, #15
 8000ec0:	428b      	cmp	r3, r1
 8000ec2:	d328      	bcc.n	8000f16 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000ec4:	6821      	ldr	r1, [r4, #0]
 8000ec6:	078f      	lsls	r7, r1, #30
 8000ec8:	d430      	bmi.n	8000f2c <HAL_RCC_ClockConfig+0x84>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000eca:	07c8      	lsls	r0, r1, #31
 8000ecc:	d443      	bmi.n	8000f56 <HAL_RCC_ClockConfig+0xae>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000ece:	4a41      	ldr	r2, [pc, #260]	; (8000fd4 <HAL_RCC_ClockConfig+0x12c>)
 8000ed0:	6813      	ldr	r3, [r2, #0]
 8000ed2:	f003 030f 	and.w	r3, r3, #15
 8000ed6:	429d      	cmp	r5, r3
 8000ed8:	d367      	bcc.n	8000faa <HAL_RCC_ClockConfig+0x102>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000eda:	6822      	ldr	r2, [r4, #0]
 8000edc:	0751      	lsls	r1, r2, #29
 8000ede:	d470      	bmi.n	8000fc2 <HAL_RCC_ClockConfig+0x11a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000ee0:	0713      	lsls	r3, r2, #28
 8000ee2:	d507      	bpl.n	8000ef4 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000ee4:	4a3c      	ldr	r2, [pc, #240]	; (8000fd8 <HAL_RCC_ClockConfig+0x130>)
 8000ee6:	6921      	ldr	r1, [r4, #16]
 8000ee8:	6893      	ldr	r3, [r2, #8]
 8000eea:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000eee:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000ef2:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000ef4:	f7ff ffaa 	bl	8000e4c <HAL_RCC_GetSysClockFreq>
 8000ef8:	4b37      	ldr	r3, [pc, #220]	; (8000fd8 <HAL_RCC_ClockConfig+0x130>)
 8000efa:	4a38      	ldr	r2, [pc, #224]	; (8000fdc <HAL_RCC_ClockConfig+0x134>)
 8000efc:	689b      	ldr	r3, [r3, #8]
 8000efe:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000f02:	5cd3      	ldrb	r3, [r2, r3]
 8000f04:	40d8      	lsrs	r0, r3
 8000f06:	4b36      	ldr	r3, [pc, #216]	; (8000fe0 <HAL_RCC_ClockConfig+0x138>)
 8000f08:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000f0a:	2000      	movs	r0, #0
 8000f0c:	f7ff fb10 	bl	8000530 <HAL_InitTick>
  return HAL_OK;
 8000f10:	2000      	movs	r0, #0
 8000f12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f16:	6813      	ldr	r3, [r2, #0]
 8000f18:	f023 030f 	bic.w	r3, r3, #15
 8000f1c:	430b      	orrs	r3, r1
 8000f1e:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000f20:	6813      	ldr	r3, [r2, #0]
 8000f22:	f003 030f 	and.w	r3, r3, #15
 8000f26:	4299      	cmp	r1, r3
 8000f28:	d1c3      	bne.n	8000eb2 <HAL_RCC_ClockConfig+0xa>
 8000f2a:	e7cb      	b.n	8000ec4 <HAL_RCC_ClockConfig+0x1c>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000f2c:	f011 0f04 	tst.w	r1, #4
 8000f30:	4b29      	ldr	r3, [pc, #164]	; (8000fd8 <HAL_RCC_ClockConfig+0x130>)
 8000f32:	d003      	beq.n	8000f3c <HAL_RCC_ClockConfig+0x94>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000f34:	689a      	ldr	r2, [r3, #8]
 8000f36:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 8000f3a:	609a      	str	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000f3c:	070e      	lsls	r6, r1, #28
 8000f3e:	d503      	bpl.n	8000f48 <HAL_RCC_ClockConfig+0xa0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000f40:	689a      	ldr	r2, [r3, #8]
 8000f42:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 8000f46:	609a      	str	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000f48:	689a      	ldr	r2, [r3, #8]
 8000f4a:	68a0      	ldr	r0, [r4, #8]
 8000f4c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000f50:	4302      	orrs	r2, r0
 8000f52:	609a      	str	r2, [r3, #8]
 8000f54:	e7b9      	b.n	8000eca <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000f56:	6861      	ldr	r1, [r4, #4]
 8000f58:	4b1f      	ldr	r3, [pc, #124]	; (8000fd8 <HAL_RCC_ClockConfig+0x130>)
 8000f5a:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f5c:	681a      	ldr	r2, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000f5e:	d11c      	bne.n	8000f9a <HAL_RCC_ClockConfig+0xf2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f60:	f412 3f00 	tst.w	r2, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f64:	d0a5      	beq.n	8000eb2 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000f66:	689a      	ldr	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f68:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000f6c:	4e1a      	ldr	r6, [pc, #104]	; (8000fd8 <HAL_RCC_ClockConfig+0x130>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000f6e:	f022 0203 	bic.w	r2, r2, #3
 8000f72:	430a      	orrs	r2, r1
 8000f74:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8000f76:	f7ff fb17 	bl	80005a8 <HAL_GetTick>
 8000f7a:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000f7c:	68b3      	ldr	r3, [r6, #8]
 8000f7e:	6862      	ldr	r2, [r4, #4]
 8000f80:	f003 030c 	and.w	r3, r3, #12
 8000f84:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000f88:	d0a1      	beq.n	8000ece <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f8a:	f7ff fb0d 	bl	80005a8 <HAL_GetTick>
 8000f8e:	1bc0      	subs	r0, r0, r7
 8000f90:	4540      	cmp	r0, r8
 8000f92:	d9f3      	bls.n	8000f7c <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
 8000f94:	2003      	movs	r0, #3
}
 8000f96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000f9a:	2902      	cmp	r1, #2
 8000f9c:	d102      	bne.n	8000fa4 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f9e:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8000fa2:	e7df      	b.n	8000f64 <HAL_RCC_ClockConfig+0xbc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fa4:	f012 0f02 	tst.w	r2, #2
 8000fa8:	e7dc      	b.n	8000f64 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000faa:	6813      	ldr	r3, [r2, #0]
 8000fac:	f023 030f 	bic.w	r3, r3, #15
 8000fb0:	432b      	orrs	r3, r5
 8000fb2:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000fb4:	6813      	ldr	r3, [r2, #0]
 8000fb6:	f003 030f 	and.w	r3, r3, #15
 8000fba:	429d      	cmp	r5, r3
 8000fbc:	f47f af79 	bne.w	8000eb2 <HAL_RCC_ClockConfig+0xa>
 8000fc0:	e78b      	b.n	8000eda <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000fc2:	4905      	ldr	r1, [pc, #20]	; (8000fd8 <HAL_RCC_ClockConfig+0x130>)
 8000fc4:	68e0      	ldr	r0, [r4, #12]
 8000fc6:	688b      	ldr	r3, [r1, #8]
 8000fc8:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000fcc:	4303      	orrs	r3, r0
 8000fce:	608b      	str	r3, [r1, #8]
 8000fd0:	e786      	b.n	8000ee0 <HAL_RCC_ClockConfig+0x38>
 8000fd2:	bf00      	nop
 8000fd4:	40023c00 	.word	0x40023c00
 8000fd8:	40023800 	.word	0x40023800
 8000fdc:	080028c1 	.word	0x080028c1
 8000fe0:	20000008 	.word	0x20000008

08000fe4 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000fe4:	4b04      	ldr	r3, [pc, #16]	; (8000ff8 <HAL_RCC_GetPCLK1Freq+0x14>)
 8000fe6:	4a05      	ldr	r2, [pc, #20]	; (8000ffc <HAL_RCC_GetPCLK1Freq+0x18>)
 8000fe8:	689b      	ldr	r3, [r3, #8]
 8000fea:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8000fee:	5cd3      	ldrb	r3, [r2, r3]
 8000ff0:	4a03      	ldr	r2, [pc, #12]	; (8001000 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000ff2:	6810      	ldr	r0, [r2, #0]
}
 8000ff4:	40d8      	lsrs	r0, r3
 8000ff6:	4770      	bx	lr
 8000ff8:	40023800 	.word	0x40023800
 8000ffc:	080028d1 	.word	0x080028d1
 8001000:	20000008 	.word	0x20000008

08001004 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001004:	4b04      	ldr	r3, [pc, #16]	; (8001018 <HAL_RCC_GetPCLK2Freq+0x14>)
 8001006:	4a05      	ldr	r2, [pc, #20]	; (800101c <HAL_RCC_GetPCLK2Freq+0x18>)
 8001008:	689b      	ldr	r3, [r3, #8]
 800100a:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800100e:	5cd3      	ldrb	r3, [r2, r3]
 8001010:	4a03      	ldr	r2, [pc, #12]	; (8001020 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001012:	6810      	ldr	r0, [r2, #0]
}
 8001014:	40d8      	lsrs	r0, r3
 8001016:	4770      	bx	lr
 8001018:	40023800 	.word	0x40023800
 800101c:	080028d1 	.word	0x080028d1
 8001020:	20000008 	.word	0x20000008

08001024 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001024:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001028:	6802      	ldr	r2, [r0, #0]
{
 800102a:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800102c:	f012 0601 	ands.w	r6, r2, #1
 8001030:	d00b      	beq.n	800104a <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001032:	4bb8      	ldr	r3, [pc, #736]	; (8001314 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001034:	6899      	ldr	r1, [r3, #8]
 8001036:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 800103a:	6099      	str	r1, [r3, #8]
 800103c:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
 800103e:	6899      	ldr	r1, [r3, #8]
 8001040:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001042:	fab6 f686 	clz	r6, r6
 8001046:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001048:	6099      	str	r1, [r3, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800104a:	f412 2500 	ands.w	r5, r2, #524288	; 0x80000
 800104e:	d012      	beq.n	8001076 <HAL_RCCEx_PeriphCLKConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001050:	49b0      	ldr	r1, [pc, #704]	; (8001314 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001052:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8001054:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001058:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800105c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
    {
      plli2sused = 1;
 8001060:	bf08      	it	eq
 8001062:	2601      	moveq	r6, #1
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001064:	ea43 0305 	orr.w	r3, r3, r5
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001068:	bf16      	itet	ne
 800106a:	fab5 f585 	clzne	r5, r5
  uint32_t pllsaiused = 0;
 800106e:	2500      	moveq	r5, #0
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001070:	096d      	lsrne	r5, r5, #5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001072:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001076:	02d7      	lsls	r7, r2, #11
 8001078:	d510      	bpl.n	800109c <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800107a:	48a6      	ldr	r0, [pc, #664]	; (8001314 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800107c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800107e:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001082:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001086:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800108a:	ea43 0301 	orr.w	r3, r3, r1
 800108e:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001092:	f000 814c 	beq.w	800132e <HAL_RCCEx_PeriphCLKConfig+0x30a>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 8001096:	2900      	cmp	r1, #0
 8001098:	bf08      	it	eq
 800109a:	2501      	moveq	r5, #1
    }
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800109c:	0690      	lsls	r0, r2, #26
 800109e:	d531      	bpl.n	8001104 <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80010a0:	4b9c      	ldr	r3, [pc, #624]	; (8001314 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80010a2:	4f9d      	ldr	r7, [pc, #628]	; (8001318 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
    __HAL_RCC_PWR_CLK_ENABLE();
 80010a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010a6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80010aa:	641a      	str	r2, [r3, #64]	; 0x40
 80010ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010b2:	9301      	str	r3, [sp, #4]
 80010b4:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010bc:	603b      	str	r3, [r7, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80010be:	f7ff fa73 	bl	80005a8 <HAL_GetTick>
 80010c2:	4680      	mov	r8, r0

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	05d9      	lsls	r1, r3, #23
 80010c8:	f140 8133 	bpl.w	8001332 <HAL_RCCEx_PeriphCLKConfig+0x30e>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80010cc:	4f91      	ldr	r7, [pc, #580]	; (8001314 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80010ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80010d0:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80010d4:	f040 8138 	bne.w	8001348 <HAL_RCCEx_PeriphCLKConfig+0x324>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80010d8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80010da:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80010de:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 80010e2:	4a8c      	ldr	r2, [pc, #560]	; (8001314 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80010e4:	f040 8156 	bne.w	8001394 <HAL_RCCEx_PeriphCLKConfig+0x370>
 80010e8:	6891      	ldr	r1, [r2, #8]
 80010ea:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 80010ee:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 80010f2:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 80010f6:	4301      	orrs	r1, r0
 80010f8:	6091      	str	r1, [r2, #8]
 80010fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80010fe:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8001100:	430b      	orrs	r3, r1
 8001102:	6713      	str	r3, [r2, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001104:	6823      	ldr	r3, [r4, #0]
 8001106:	06df      	lsls	r7, r3, #27
 8001108:	d50c      	bpl.n	8001124 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800110a:	4a82      	ldr	r2, [pc, #520]	; (8001314 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800110c:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8001110:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8001114:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 8001118:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 800111c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800111e:	4301      	orrs	r1, r0
 8001120:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001124:	0458      	lsls	r0, r3, #17
 8001126:	d508      	bpl.n	800113a <HAL_RCCEx_PeriphCLKConfig+0x116>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001128:	497a      	ldr	r1, [pc, #488]	; (8001314 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800112a:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 800112c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001130:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8001134:	4302      	orrs	r2, r0
 8001136:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800113a:	0419      	lsls	r1, r3, #16
 800113c:	d508      	bpl.n	8001150 <HAL_RCCEx_PeriphCLKConfig+0x12c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800113e:	4975      	ldr	r1, [pc, #468]	; (8001314 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001140:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8001142:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001146:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 800114a:	4302      	orrs	r2, r0
 800114c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001150:	03da      	lsls	r2, r3, #15
 8001152:	d508      	bpl.n	8001166 <HAL_RCCEx_PeriphCLKConfig+0x142>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001154:	496f      	ldr	r1, [pc, #444]	; (8001314 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001156:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8001158:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800115c:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8001160:	4302      	orrs	r2, r0
 8001162:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001166:	065f      	lsls	r7, r3, #25
 8001168:	d508      	bpl.n	800117c <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800116a:	496a      	ldr	r1, [pc, #424]	; (8001314 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800116c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800116e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001172:	f022 0203 	bic.w	r2, r2, #3
 8001176:	4302      	orrs	r2, r0
 8001178:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800117c:	0618      	lsls	r0, r3, #24
 800117e:	d508      	bpl.n	8001192 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001180:	4964      	ldr	r1, [pc, #400]	; (8001314 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001182:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8001184:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001188:	f022 020c 	bic.w	r2, r2, #12
 800118c:	4302      	orrs	r2, r0
 800118e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001192:	05d9      	lsls	r1, r3, #23
 8001194:	d508      	bpl.n	80011a8 <HAL_RCCEx_PeriphCLKConfig+0x184>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001196:	495f      	ldr	r1, [pc, #380]	; (8001314 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001198:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800119a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800119e:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 80011a2:	4302      	orrs	r2, r0
 80011a4:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80011a8:	059a      	lsls	r2, r3, #22
 80011aa:	d508      	bpl.n	80011be <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80011ac:	4959      	ldr	r1, [pc, #356]	; (8001314 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80011ae:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80011b0:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80011b4:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80011b8:	4302      	orrs	r2, r0
 80011ba:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80011be:	055f      	lsls	r7, r3, #21
 80011c0:	d508      	bpl.n	80011d4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80011c2:	4954      	ldr	r1, [pc, #336]	; (8001314 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80011c4:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80011c6:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80011ca:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80011ce:	4302      	orrs	r2, r0
 80011d0:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80011d4:	0518      	lsls	r0, r3, #20
 80011d6:	d508      	bpl.n	80011ea <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80011d8:	494e      	ldr	r1, [pc, #312]	; (8001314 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80011da:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80011dc:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80011e0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80011e4:	4302      	orrs	r2, r0
 80011e6:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80011ea:	04d9      	lsls	r1, r3, #19
 80011ec:	d508      	bpl.n	8001200 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80011ee:	4949      	ldr	r1, [pc, #292]	; (8001314 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80011f0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80011f2:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80011f6:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80011fa:	4302      	orrs	r2, r0
 80011fc:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8001200:	049a      	lsls	r2, r3, #18
 8001202:	d508      	bpl.n	8001216 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8001204:	4943      	ldr	r1, [pc, #268]	; (8001314 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001206:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001208:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800120c:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8001210:	4302      	orrs	r2, r0
 8001212:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001216:	029f      	lsls	r7, r3, #10
 8001218:	d50c      	bpl.n	8001234 <HAL_RCCEx_PeriphCLKConfig+0x210>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800121a:	483e      	ldr	r0, [pc, #248]	; (8001314 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800121c:	6f61      	ldr	r1, [r4, #116]	; 0x74
 800121e:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 8001222:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001226:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
      pllsaiused = 1;
 800122a:	bf08      	it	eq
 800122c:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800122e:	430a      	orrs	r2, r1
 8001230:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
    }
  }

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001234:	0358      	lsls	r0, r3, #13
 8001236:	d508      	bpl.n	800124a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001238:	4936      	ldr	r1, [pc, #216]	; (8001314 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800123a:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800123c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001240:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001244:	4302      	orrs	r2, r0
 8001246:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800124a:	0219      	lsls	r1, r3, #8
 800124c:	d508      	bpl.n	8001260 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800124e:	4931      	ldr	r1, [pc, #196]	; (8001314 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001250:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8001252:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001256:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800125a:	4302      	orrs	r2, r0
 800125c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8001260:	015a      	lsls	r2, r3, #5
 8001262:	d508      	bpl.n	8001276 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8001264:	492b      	ldr	r1, [pc, #172]	; (8001314 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001266:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8001268:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800126c:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8001270:	4302      	orrs	r2, r0
 8001272:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2 or I2S */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001276:	2e00      	cmp	r6, #0
 8001278:	f040 8090 	bne.w	800139c <HAL_RCCEx_PeriphCLKConfig+0x378>
 800127c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001280:	f000 808c 	beq.w	800139c <HAL_RCCEx_PeriphCLKConfig+0x378>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8001284:	2d01      	cmp	r5, #1
 8001286:	d150      	bne.n	800132a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8001288:	4d22      	ldr	r5, [pc, #136]	; (8001314 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800128a:	682b      	ldr	r3, [r5, #0]
 800128c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001290:	602b      	str	r3, [r5, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001292:	f7ff f989 	bl	80005a8 <HAL_GetTick>
 8001296:	4606      	mov	r6, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001298:	682b      	ldr	r3, [r5, #0]
 800129a:	009f      	lsls	r7, r3, #2
 800129c:	f100 80e1 	bmi.w	8001462 <HAL_RCCEx_PeriphCLKConfig+0x43e>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80012a0:	6820      	ldr	r0, [r4, #0]
 80012a2:	0305      	lsls	r5, r0, #12
 80012a4:	d501      	bpl.n	80012aa <HAL_RCCEx_PeriphCLKConfig+0x286>
 80012a6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80012a8:	b11b      	cbz	r3, 80012b2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
 80012aa:	02c1      	lsls	r1, r0, #11
 80012ac:	d518      	bpl.n	80012e0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80012ae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80012b0:	b9b3      	cbnz	r3, 80012e0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80012b2:	4918      	ldr	r1, [pc, #96]	; (8001314 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 80012b4:	6963      	ldr	r3, [r4, #20]
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80012b6:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 80012ba:	6925      	ldr	r5, [r4, #16]
 80012bc:	061b      	lsls	r3, r3, #24
 80012be:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 80012c2:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 80012c6:	4313      	orrs	r3, r2
 80012c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80012cc:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
 80012d0:	6a22      	ldr	r2, [r4, #32]
 80012d2:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 80012d6:	3a01      	subs	r2, #1
 80012d8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80012dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80012e0:	0282      	lsls	r2, r0, #10
 80012e2:	d510      	bpl.n	8001306 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 80012e4:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80012e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80012ea:	d10c      	bne.n	8001306 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80012ec:	4909      	ldr	r1, [pc, #36]	; (8001314 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 80012ee:	69a3      	ldr	r3, [r4, #24]
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80012f0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 80012f4:	6920      	ldr	r0, [r4, #16]
 80012f6:	041b      	lsls	r3, r3, #16
 80012f8:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 80012fc:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001300:	4313      	orrs	r3, r2
 8001302:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8001306:	4c03      	ldr	r4, [pc, #12]	; (8001314 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001308:	6823      	ldr	r3, [r4, #0]
 800130a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800130e:	6023      	str	r3, [r4, #0]
 8001310:	e004      	b.n	800131c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 8001312:	bf00      	nop
 8001314:	40023800 	.word	0x40023800
 8001318:	40007000 	.word	0x40007000

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800131c:	f7ff f944 	bl	80005a8 <HAL_GetTick>
 8001320:	4605      	mov	r5, r0

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001322:	6823      	ldr	r3, [r4, #0]
 8001324:	009b      	lsls	r3, r3, #2
 8001326:	f140 80a3 	bpl.w	8001470 <HAL_RCCEx_PeriphCLKConfig+0x44c>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 800132a:	2000      	movs	r0, #0
 800132c:	e009      	b.n	8001342 <HAL_RCCEx_PeriphCLKConfig+0x31e>
      plli2sused = 1;
 800132e:	2601      	movs	r6, #1
 8001330:	e6b4      	b.n	800109c <HAL_RCCEx_PeriphCLKConfig+0x78>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001332:	f7ff f939 	bl	80005a8 <HAL_GetTick>
 8001336:	eba0 0008 	sub.w	r0, r0, r8
 800133a:	2864      	cmp	r0, #100	; 0x64
 800133c:	f67f aec2 	bls.w	80010c4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
        return HAL_TIMEOUT;
 8001340:	2003      	movs	r0, #3
}
 8001342:	b003      	add	sp, #12
 8001344:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001348:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800134a:	f402 7240 	and.w	r2, r2, #768	; 0x300
 800134e:	4293      	cmp	r3, r2
 8001350:	f43f aec2 	beq.w	80010d8 <HAL_RCCEx_PeriphCLKConfig+0xb4>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001354:	6f3b      	ldr	r3, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8001356:	6f3a      	ldr	r2, [r7, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001358:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 800135c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001360:	673a      	str	r2, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001362:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001364:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001368:	673a      	str	r2, [r7, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 800136a:	673b      	str	r3, [r7, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800136c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800136e:	07da      	lsls	r2, r3, #31
 8001370:	f57f aeb2 	bpl.w	80010d8 <HAL_RCCEx_PeriphCLKConfig+0xb4>
        tickstart = HAL_GetTick();
 8001374:	f7ff f918 	bl	80005a8 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001378:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800137c:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800137e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001380:	079b      	lsls	r3, r3, #30
 8001382:	f53f aea9 	bmi.w	80010d8 <HAL_RCCEx_PeriphCLKConfig+0xb4>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001386:	f7ff f90f 	bl	80005a8 <HAL_GetTick>
 800138a:	eba0 0008 	sub.w	r0, r0, r8
 800138e:	4548      	cmp	r0, r9
 8001390:	d9f5      	bls.n	800137e <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8001392:	e7d5      	b.n	8001340 <HAL_RCCEx_PeriphCLKConfig+0x31c>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001394:	6891      	ldr	r1, [r2, #8]
 8001396:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 800139a:	e6ad      	b.n	80010f8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
    __HAL_RCC_PLLI2S_DISABLE();
 800139c:	4e38      	ldr	r6, [pc, #224]	; (8001480 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800139e:	6833      	ldr	r3, [r6, #0]
 80013a0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80013a4:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 80013a6:	f7ff f8ff 	bl	80005a8 <HAL_GetTick>
 80013aa:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80013ac:	6833      	ldr	r3, [r6, #0]
 80013ae:	011b      	lsls	r3, r3, #4
 80013b0:	d451      	bmi.n	8001456 <HAL_RCCEx_PeriphCLKConfig+0x432>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80013b2:	6822      	ldr	r2, [r4, #0]
 80013b4:	07d7      	lsls	r7, r2, #31
 80013b6:	d50d      	bpl.n	80013d4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
 80013b8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80013ba:	b95b      	cbnz	r3, 80013d4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 80013bc:	68a3      	ldr	r3, [r4, #8]
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80013be:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 80013c2:	6860      	ldr	r0, [r4, #4]
 80013c4:	071b      	lsls	r3, r3, #28
 80013c6:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 80013ca:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80013ce:	430b      	orrs	r3, r1
 80013d0:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80013d4:	0310      	lsls	r0, r2, #12
 80013d6:	d503      	bpl.n	80013e0 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80013d8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80013da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80013de:	d005      	beq.n	80013ec <HAL_RCCEx_PeriphCLKConfig+0x3c8>
 80013e0:	02d1      	lsls	r1, r2, #11
 80013e2:	d519      	bpl.n	8001418 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80013e4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80013e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80013ea:	d115      	bne.n	8001418 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80013ec:	4924      	ldr	r1, [pc, #144]	; (8001480 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 80013ee:	68e3      	ldr	r3, [r4, #12]
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80013f0:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 80013f4:	6866      	ldr	r6, [r4, #4]
 80013f6:	061b      	lsls	r3, r3, #24
 80013f8:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 80013fc:	ea43 1386 	orr.w	r3, r3, r6, lsl #6
 8001400:	4303      	orrs	r3, r0
 8001402:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8001406:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
 800140a:	69e3      	ldr	r3, [r4, #28]
 800140c:	f020 001f 	bic.w	r0, r0, #31
 8001410:	3b01      	subs	r3, #1
 8001412:	4303      	orrs	r3, r0
 8001414:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001418:	0192      	lsls	r2, r2, #6
 800141a:	d50a      	bpl.n	8001432 <HAL_RCCEx_PeriphCLKConfig+0x40e>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800141c:	68e3      	ldr	r3, [r4, #12]
 800141e:	6862      	ldr	r2, [r4, #4]
 8001420:	061b      	lsls	r3, r3, #24
 8001422:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001426:	68a2      	ldr	r2, [r4, #8]
 8001428:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 800142c:	4a14      	ldr	r2, [pc, #80]	; (8001480 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800142e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8001432:	4e13      	ldr	r6, [pc, #76]	; (8001480 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8001434:	6833      	ldr	r3, [r6, #0]
 8001436:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800143a:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 800143c:	f7ff f8b4 	bl	80005a8 <HAL_GetTick>
 8001440:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001442:	6833      	ldr	r3, [r6, #0]
 8001444:	011b      	lsls	r3, r3, #4
 8001446:	f53f af1d 	bmi.w	8001284 <HAL_RCCEx_PeriphCLKConfig+0x260>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800144a:	f7ff f8ad 	bl	80005a8 <HAL_GetTick>
 800144e:	1bc0      	subs	r0, r0, r7
 8001450:	2864      	cmp	r0, #100	; 0x64
 8001452:	d9f6      	bls.n	8001442 <HAL_RCCEx_PeriphCLKConfig+0x41e>
 8001454:	e774      	b.n	8001340 <HAL_RCCEx_PeriphCLKConfig+0x31c>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001456:	f7ff f8a7 	bl	80005a8 <HAL_GetTick>
 800145a:	1bc0      	subs	r0, r0, r7
 800145c:	2864      	cmp	r0, #100	; 0x64
 800145e:	d9a5      	bls.n	80013ac <HAL_RCCEx_PeriphCLKConfig+0x388>
 8001460:	e76e      	b.n	8001340 <HAL_RCCEx_PeriphCLKConfig+0x31c>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8001462:	f7ff f8a1 	bl	80005a8 <HAL_GetTick>
 8001466:	1b80      	subs	r0, r0, r6
 8001468:	2864      	cmp	r0, #100	; 0x64
 800146a:	f67f af15 	bls.w	8001298 <HAL_RCCEx_PeriphCLKConfig+0x274>
 800146e:	e767      	b.n	8001340 <HAL_RCCEx_PeriphCLKConfig+0x31c>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8001470:	f7ff f89a 	bl	80005a8 <HAL_GetTick>
 8001474:	1b40      	subs	r0, r0, r5
 8001476:	2864      	cmp	r0, #100	; 0x64
 8001478:	f67f af53 	bls.w	8001322 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 800147c:	e760      	b.n	8001340 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 800147e:	bf00      	nop
 8001480:	40023800 	.word	0x40023800

08001484 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8001484:	4a30      	ldr	r2, [pc, #192]	; (8001548 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 8001486:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8001488:	4290      	cmp	r0, r2
 800148a:	d012      	beq.n	80014b2 <TIM_Base_SetConfig+0x2e>
 800148c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001490:	d00f      	beq.n	80014b2 <TIM_Base_SetConfig+0x2e>
 8001492:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001496:	4290      	cmp	r0, r2
 8001498:	d00b      	beq.n	80014b2 <TIM_Base_SetConfig+0x2e>
 800149a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800149e:	4290      	cmp	r0, r2
 80014a0:	d007      	beq.n	80014b2 <TIM_Base_SetConfig+0x2e>
 80014a2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80014a6:	4290      	cmp	r0, r2
 80014a8:	d003      	beq.n	80014b2 <TIM_Base_SetConfig+0x2e>
 80014aa:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80014ae:	4290      	cmp	r0, r2
 80014b0:	d11d      	bne.n	80014ee <TIM_Base_SetConfig+0x6a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 80014b2:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80014b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80014b8:	4313      	orrs	r3, r2
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 80014ba:	4a23      	ldr	r2, [pc, #140]	; (8001548 <TIM_Base_SetConfig+0xc4>)
 80014bc:	4290      	cmp	r0, r2
 80014be:	d104      	bne.n	80014ca <TIM_Base_SetConfig+0x46>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80014c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80014c4:	68ca      	ldr	r2, [r1, #12]
 80014c6:	4313      	orrs	r3, r2
 80014c8:	e028      	b.n	800151c <TIM_Base_SetConfig+0x98>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 80014ca:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80014ce:	d0f7      	beq.n	80014c0 <TIM_Base_SetConfig+0x3c>
 80014d0:	4a1e      	ldr	r2, [pc, #120]	; (800154c <TIM_Base_SetConfig+0xc8>)
 80014d2:	4290      	cmp	r0, r2
 80014d4:	d0f4      	beq.n	80014c0 <TIM_Base_SetConfig+0x3c>
 80014d6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80014da:	4290      	cmp	r0, r2
 80014dc:	d0f0      	beq.n	80014c0 <TIM_Base_SetConfig+0x3c>
 80014de:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80014e2:	4290      	cmp	r0, r2
 80014e4:	d0ec      	beq.n	80014c0 <TIM_Base_SetConfig+0x3c>
 80014e6:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80014ea:	4290      	cmp	r0, r2
 80014ec:	d0e8      	beq.n	80014c0 <TIM_Base_SetConfig+0x3c>
 80014ee:	4a18      	ldr	r2, [pc, #96]	; (8001550 <TIM_Base_SetConfig+0xcc>)
 80014f0:	4290      	cmp	r0, r2
 80014f2:	d0e5      	beq.n	80014c0 <TIM_Base_SetConfig+0x3c>
 80014f4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80014f8:	4290      	cmp	r0, r2
 80014fa:	d0e1      	beq.n	80014c0 <TIM_Base_SetConfig+0x3c>
 80014fc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001500:	4290      	cmp	r0, r2
 8001502:	d0dd      	beq.n	80014c0 <TIM_Base_SetConfig+0x3c>
 8001504:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8001508:	4290      	cmp	r0, r2
 800150a:	d0d9      	beq.n	80014c0 <TIM_Base_SetConfig+0x3c>
 800150c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001510:	4290      	cmp	r0, r2
 8001512:	d0d5      	beq.n	80014c0 <TIM_Base_SetConfig+0x3c>
 8001514:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001518:	4290      	cmp	r0, r2
 800151a:	d0d1      	beq.n	80014c0 <TIM_Base_SetConfig+0x3c>
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800151c:	694a      	ldr	r2, [r1, #20]
 800151e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001522:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8001524:	6003      	str	r3, [r0, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001526:	688b      	ldr	r3, [r1, #8]
 8001528:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800152a:	680b      	ldr	r3, [r1, #0]
 800152c:	6283      	str	r3, [r0, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 800152e:	4b06      	ldr	r3, [pc, #24]	; (8001548 <TIM_Base_SetConfig+0xc4>)
 8001530:	4298      	cmp	r0, r3
 8001532:	d006      	beq.n	8001542 <TIM_Base_SetConfig+0xbe>
 8001534:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001538:	4298      	cmp	r0, r3
 800153a:	d002      	beq.n	8001542 <TIM_Base_SetConfig+0xbe>
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800153c:	2301      	movs	r3, #1
 800153e:	6143      	str	r3, [r0, #20]
}
 8001540:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8001542:	690b      	ldr	r3, [r1, #16]
 8001544:	6303      	str	r3, [r0, #48]	; 0x30
 8001546:	e7f9      	b.n	800153c <TIM_Base_SetConfig+0xb8>
 8001548:	40010000 	.word	0x40010000
 800154c:	40000400 	.word	0x40000400
 8001550:	40014000 	.word	0x40014000

08001554 <HAL_TIM_PWM_Init>:
{
 8001554:	b510      	push	{r4, lr}
  if(htim == NULL)
 8001556:	4604      	mov	r4, r0
 8001558:	b1a0      	cbz	r0, 8001584 <HAL_TIM_PWM_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 800155a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800155e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001562:	b91b      	cbnz	r3, 800156c <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001564:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8001568:	f001 f81c 	bl	80025a4 <HAL_TIM_PWM_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;  
 800156c:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 800156e:	6820      	ldr	r0, [r4, #0]
 8001570:	1d21      	adds	r1, r4, #4
  htim->State= HAL_TIM_STATE_BUSY;  
 8001572:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8001576:	f7ff ff85 	bl	8001484 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 800157a:	2301      	movs	r3, #1
  return HAL_OK;
 800157c:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 800157e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001582:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001584:	2001      	movs	r0, #1
}  
 8001586:	bd10      	pop	{r4, pc}

08001588 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;  

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001588:	6a03      	ldr	r3, [r0, #32]
 800158a:	f023 0301 	bic.w	r3, r3, #1
{
 800158e:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001590:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001592:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8001594:	6842      	ldr	r2, [r0, #4]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001596:	6984      	ldr	r4, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001598:	f023 0302 	bic.w	r3, r3, #2
  tmpccmrx |= OC_Config->OCMode;
 800159c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800159e:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 80015a2:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80015a6:	432c      	orrs	r4, r5
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80015a8:	688d      	ldr	r5, [r1, #8]
 80015aa:	432b      	orrs	r3, r5

    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 80015ac:	4d0c      	ldr	r5, [pc, #48]	; (80015e0 <TIM_OC1_SetConfig+0x58>)
 80015ae:	42a8      	cmp	r0, r5
 80015b0:	d009      	beq.n	80015c6 <TIM_OC1_SetConfig+0x3e>
 80015b2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80015b6:	42a8      	cmp	r0, r5
 80015b8:	d005      	beq.n	80015c6 <TIM_OC1_SetConfig+0x3e>
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80015ba:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80015bc:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 80015be:	6184      	str	r4, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 80015c0:	6342      	str	r2, [r0, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 80015c2:	6203      	str	r3, [r0, #32]
} 
 80015c4:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= OC_Config->OCNPolarity;
 80015c6:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 80015c8:	f023 0308 	bic.w	r3, r3, #8
    tmpcr2 |= OC_Config->OCNIdleState;
 80015cc:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80015ce:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpccer |= OC_Config->OCNPolarity;
 80015d2:	432b      	orrs	r3, r5
    tmpcr2 |= OC_Config->OCNIdleState;
 80015d4:	694d      	ldr	r5, [r1, #20]
 80015d6:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 80015d8:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 80015dc:	432a      	orrs	r2, r5
 80015de:	e7ec      	b.n	80015ba <TIM_OC1_SetConfig+0x32>
 80015e0:	40010000 	.word	0x40010000

080015e4 <TIM_OC2_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;
   
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80015e4:	6a03      	ldr	r3, [r0, #32]
 80015e6:	f023 0310 	bic.w	r3, r3, #16
{
 80015ea:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80015ec:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 80015ee:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 80015f0:	6842      	ldr	r2, [r0, #4]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80015f2:	6984      	ldr	r4, [r0, #24]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80015f4:	f023 0320 	bic.w	r3, r3, #32
  tmpccmrx |= (OC_Config->OCMode << 8);
 80015f8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80015fa:	f024 7480 	bic.w	r4, r4, #16777216	; 0x1000000
 80015fe:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8);
 8001602:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4);
 8001606:	688d      	ldr	r5, [r1, #8]
 8001608:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 800160c:	4d0d      	ldr	r5, [pc, #52]	; (8001644 <TIM_OC2_SetConfig+0x60>)
 800160e:	42a8      	cmp	r0, r5
 8001610:	d009      	beq.n	8001626 <TIM_OC2_SetConfig+0x42>
 8001612:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001616:	42a8      	cmp	r0, r5
 8001618:	d005      	beq.n	8001626 <TIM_OC2_SetConfig+0x42>
    tmpcr2 |= (OC_Config->OCIdleState << 2);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800161a:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800161c:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 800161e:	6184      	str	r4, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8001620:	6382      	str	r2, [r0, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001622:	6203      	str	r3, [r0, #32]
}
 8001624:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= (OC_Config->OCNPolarity << 4);
 8001626:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8001628:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 800162c:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800162e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
    tmpccer |= (OC_Config->OCNPolarity << 4);
 8001632:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 8001636:	694d      	ldr	r5, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8001638:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 800163a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 800163e:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
 8001642:	e7ea      	b.n	800161a <TIM_OC2_SetConfig+0x36>
 8001644:	40010000 	.word	0x40010000

08001648 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001648:	6a03      	ldr	r3, [r0, #32]
 800164a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
{
 800164e:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001650:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001652:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8001654:	6842      	ldr	r2, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001656:	69c4      	ldr	r4, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8001658:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccmrx |= OC_Config->OCMode;
 800165c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 800165e:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 8001662:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8001666:	432c      	orrs	r4, r5
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8);
 8001668:	688d      	ldr	r5, [r1, #8]
 800166a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 800166e:	4d0e      	ldr	r5, [pc, #56]	; (80016a8 <TIM_OC3_SetConfig+0x60>)
 8001670:	42a8      	cmp	r0, r5
 8001672:	d009      	beq.n	8001688 <TIM_OC3_SetConfig+0x40>
 8001674:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001678:	42a8      	cmp	r0, r5
 800167a:	d005      	beq.n	8001688 <TIM_OC3_SetConfig+0x40>
    tmpcr2 |= (OC_Config->OCIdleState << 4);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800167c:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800167e:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8001680:	61c4      	str	r4, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8001682:	63c2      	str	r2, [r0, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001684:	6203      	str	r3, [r0, #32]
}
 8001686:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= (OC_Config->OCNPolarity << 8);
 8001688:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 800168a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 800168e:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001690:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    tmpccer |= (OC_Config->OCNPolarity << 8);
 8001694:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpcr2 |= (OC_Config->OCIdleState << 4);
 8001698:	694d      	ldr	r5, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 800169a:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 800169c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 80016a0:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
 80016a4:	e7ea      	b.n	800167c <TIM_OC3_SetConfig+0x34>
 80016a6:	bf00      	nop
 80016a8:	40010000 	.word	0x40010000

080016ac <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80016ac:	6a03      	ldr	r3, [r0, #32]
 80016ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
{
 80016b2:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80016b4:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80016b6:	6a04      	ldr	r4, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 80016b8:	6842      	ldr	r2, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80016ba:	69c3      	ldr	r3, [r0, #28]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80016bc:	f424 5400 	bic.w	r4, r4, #8192	; 0x2000
  tmpccmrx |= (OC_Config->OCMode << 8);
 80016c0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80016c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80016c6:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8);
 80016ca:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12);
 80016ce:	688d      	ldr	r5, [r1, #8]
 80016d0:	ea44 3405 	orr.w	r4, r4, r5, lsl #12
   
  /*if((TIMx == TIM1) || (TIMx == TIM8))*/
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 80016d4:	4d09      	ldr	r5, [pc, #36]	; (80016fc <TIM_OC4_SetConfig+0x50>)
 80016d6:	42a8      	cmp	r0, r5
 80016d8:	d009      	beq.n	80016ee <TIM_OC4_SetConfig+0x42>
 80016da:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80016de:	42a8      	cmp	r0, r5
 80016e0:	d005      	beq.n	80016ee <TIM_OC4_SetConfig+0x42>
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80016e2:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 80016e4:	61c3      	str	r3, [r0, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80016e6:	684b      	ldr	r3, [r1, #4]
 80016e8:	6403      	str	r3, [r0, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80016ea:	6204      	str	r4, [r0, #32]
}
 80016ec:	bd30      	pop	{r4, r5, pc}
    tmpcr2 &= ~TIM_CR2_OIS4;
 80016ee:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 80016f2:	694d      	ldr	r5, [r1, #20]
 80016f4:	ea42 1285 	orr.w	r2, r2, r5, lsl #6
 80016f8:	e7f3      	b.n	80016e2 <TIM_OC4_SetConfig+0x36>
 80016fa:	bf00      	nop
 80016fc:	40010000 	.word	0x40010000

08001700 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8001700:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx)); 
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 8001702:	2401      	movs	r4, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001704:	6a03      	ldr	r3, [r0, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8001706:	408a      	lsls	r2, r1
  tmp = TIM_CCER_CC1E << Channel;
 8001708:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 800170a:	ea23 0304 	bic.w	r3, r3, r4
 800170e:	6203      	str	r3, [r0, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8001710:	6a03      	ldr	r3, [r0, #32]
 8001712:	431a      	orrs	r2, r3
 8001714:	6202      	str	r2, [r0, #32]
 8001716:	bd10      	pop	{r4, pc}

08001718 <HAL_TIM_PWM_Start>:
{
 8001718:	b510      	push	{r4, lr}
 800171a:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800171c:	2201      	movs	r2, #1
 800171e:	6800      	ldr	r0, [r0, #0]
 8001720:	f7ff ffee 	bl	8001700 <TIM_CCxChannelCmd>
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 8001724:	6823      	ldr	r3, [r4, #0]
 8001726:	4a08      	ldr	r2, [pc, #32]	; (8001748 <HAL_TIM_PWM_Start+0x30>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d003      	beq.n	8001734 <HAL_TIM_PWM_Start+0x1c>
 800172c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001730:	4293      	cmp	r3, r2
 8001732:	d103      	bne.n	800173c <HAL_TIM_PWM_Start+0x24>
    __HAL_TIM_MOE_ENABLE(htim);
 8001734:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001736:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800173a:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 800173c:	681a      	ldr	r2, [r3, #0]
} 
 800173e:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE(htim);
 8001740:	f042 0201 	orr.w	r2, r2, #1
 8001744:	601a      	str	r2, [r3, #0]
} 
 8001746:	bd10      	pop	{r4, pc}
 8001748:	40010000 	.word	0x40010000

0800174c <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable. 
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800174c:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_ADVANCED_INSTANCE(TIMx));
  assert_param(IS_TIM_COMPLEMENTARY_CHANNELS(Channel));

  tmp = TIM_CCER_CC1NE << Channel;
 800174e:	2404      	movs	r4, #4

  /* Reset the CCxNE Bit */
  TIMx->CCER &= ~tmp;
 8001750:	6a03      	ldr	r3, [r0, #32]

  /* Set or reset the CCxNE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelNState << Channel);
 8001752:	408a      	lsls	r2, r1
  tmp = TIM_CCER_CC1NE << Channel;
 8001754:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8001756:	ea23 0304 	bic.w	r3, r3, r4
 800175a:	6203      	str	r3, [r0, #32]
  TIMx->CCER |= (uint32_t)(ChannelNState << Channel);
 800175c:	6a03      	ldr	r3, [r0, #32]
 800175e:	431a      	orrs	r2, r3
 8001760:	6202      	str	r2, [r0, #32]
 8001762:	bd10      	pop	{r4, pc}

08001764 <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0; 

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8001764:	6a03      	ldr	r3, [r0, #32]
 8001766:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
{
 800176a:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800176c:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800176e:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8001770:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8001772:	6d43      	ldr	r3, [r0, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8001774:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  tmpccmrx |= OC_Config->OCMode;
 8001778:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800177a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800177e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpccmrx |= OC_Config->OCMode;
 8001782:	432b      	orrs	r3, r5
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16);
 8001784:	688d      	ldr	r5, [r1, #8]
 8001786:	ea42 4205 	orr.w	r2, r2, r5, lsl #16

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800178a:	4d09      	ldr	r5, [pc, #36]	; (80017b0 <TIM_OC5_SetConfig+0x4c>)
 800178c:	42a8      	cmp	r0, r5
 800178e:	d003      	beq.n	8001798 <TIM_OC5_SetConfig+0x34>
 8001790:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001794:	42a8      	cmp	r0, r5
 8001796:	d104      	bne.n	80017a2 <TIM_OC5_SetConfig+0x3e>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8001798:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8);
 800179c:	694d      	ldr	r5, [r1, #20]
 800179e:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80017a2:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80017a4:	6543      	str	r3, [r0, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80017a6:	684b      	ldr	r3, [r1, #4]
 80017a8:	6583      	str	r3, [r0, #88]	; 0x58
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 80017aa:	6202      	str	r2, [r0, #32]
 80017ac:	bd30      	pop	{r4, r5, pc}
 80017ae:	bf00      	nop
 80017b0:	40010000 	.word	0x40010000

080017b4 <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0; 

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80017b4:	6a03      	ldr	r3, [r0, #32]
 80017b6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
{
 80017ba:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80017bc:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80017be:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 80017c0:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80017c2:	6d43      	ldr	r3, [r0, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80017c4:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  tmpccmrx |= (OC_Config->OCMode << 8);
 80017c8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80017ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80017ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8);
 80017d2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20);
 80017d6:	688d      	ldr	r5, [r1, #8]
 80017d8:	ea42 5205 	orr.w	r2, r2, r5, lsl #20

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80017dc:	4d08      	ldr	r5, [pc, #32]	; (8001800 <TIM_OC6_SetConfig+0x4c>)
 80017de:	42a8      	cmp	r0, r5
 80017e0:	d003      	beq.n	80017ea <TIM_OC6_SetConfig+0x36>
 80017e2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80017e6:	42a8      	cmp	r0, r5
 80017e8:	d104      	bne.n	80017f4 <TIM_OC6_SetConfig+0x40>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80017ea:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10);
 80017ee:	694d      	ldr	r5, [r1, #20]
 80017f0:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }
  
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80017f4:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80017f6:	6543      	str	r3, [r0, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80017f8:	684b      	ldr	r3, [r1, #4]
 80017fa:	65c3      	str	r3, [r0, #92]	; 0x5c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 80017fc:	6202      	str	r2, [r0, #32]
 80017fe:	bd30      	pop	{r4, r5, pc}
 8001800:	40010000 	.word	0x40010000

08001804 <HAL_TIMEx_PWMN_Start>:
{
 8001804:	b510      	push	{r4, lr}
 8001806:	4604      	mov	r4, r0
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8001808:	2204      	movs	r2, #4
 800180a:	6800      	ldr	r0, [r0, #0]
 800180c:	f7ff ff9e 	bl	800174c <TIM_CCxNChannelCmd>
  __HAL_TIM_MOE_ENABLE(htim);
 8001810:	6823      	ldr	r3, [r4, #0]
} 
 8001812:	2000      	movs	r0, #0
  __HAL_TIM_MOE_ENABLE(htim);
 8001814:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001816:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800181a:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 800181c:	681a      	ldr	r2, [r3, #0]
 800181e:	f042 0201 	orr.w	r2, r2, #1
 8001822:	601a      	str	r2, [r3, #0]
} 
 8001824:	bd10      	pop	{r4, pc}
	...

08001828 <HAL_TIMEx_MasterConfigSynchronization>:
  __HAL_LOCK(htim);
 8001828:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800182c:	2b01      	cmp	r3, #1
{
 800182e:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 8001830:	d01c      	beq.n	800186c <HAL_TIMEx_MasterConfigSynchronization+0x44>
  tmpcr2 = htim->Instance->CR2;
 8001832:	6802      	ldr	r2, [r0, #0]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8001834:	4d0e      	ldr	r5, [pc, #56]	; (8001870 <HAL_TIMEx_MasterConfigSynchronization+0x48>)
  tmpcr2 = htim->Instance->CR2;
 8001836:	6853      	ldr	r3, [r2, #4]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8001838:	42aa      	cmp	r2, r5
  tmpsmcr = htim->Instance->SMCR;
 800183a:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800183c:	d003      	beq.n	8001846 <HAL_TIMEx_MasterConfigSynchronization+0x1e>
 800183e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001842:	42aa      	cmp	r2, r5
 8001844:	d103      	bne.n	800184e <HAL_TIMEx_MasterConfigSynchronization+0x26>
    tmpcr2 &= ~TIM_CR2_MMS2;
 8001846:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800184a:	684d      	ldr	r5, [r1, #4]
 800184c:	432b      	orrs	r3, r5
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800184e:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8001850:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001854:	6889      	ldr	r1, [r1, #8]
  tmpsmcr &= ~TIM_SMCR_MSM;
 8001856:	f024 0480 	bic.w	r4, r4, #128	; 0x80
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800185a:	432b      	orrs	r3, r5
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800185c:	4321      	orrs	r1, r4
  htim->Instance->CR2 = tmpcr2;
 800185e:	6053      	str	r3, [r2, #4]
  __HAL_UNLOCK(htim);
 8001860:	2300      	movs	r3, #0
  htim->Instance->SMCR = tmpsmcr;
 8001862:	6091      	str	r1, [r2, #8]
  __HAL_UNLOCK(htim);
 8001864:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8001868:	4618      	mov	r0, r3
 800186a:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(htim);
 800186c:	2002      	movs	r0, #2
} 
 800186e:	bd30      	pop	{r4, r5, pc}
 8001870:	40010000 	.word	0x40010000

08001874 <HAL_TIMEx_ConfigBreakDeadTime>:
  __HAL_LOCK(htim);
 8001874:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001878:	2b01      	cmp	r3, #1
{
 800187a:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 800187c:	d038      	beq.n	80018f0 <HAL_TIMEx_ConfigBreakDeadTime+0x7c>
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800187e:	68cb      	ldr	r3, [r1, #12]
 8001880:	688a      	ldr	r2, [r1, #8]
 8001882:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8001886:	4c1b      	ldr	r4, [pc, #108]	; (80018f4 <HAL_TIMEx_ConfigBreakDeadTime+0x80>)
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8001888:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800188a:	684a      	ldr	r2, [r1, #4]
 800188c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001890:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8001892:	680a      	ldr	r2, [r1, #0]
 8001894:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001898:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800189a:	690a      	ldr	r2, [r1, #16]
 800189c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80018a0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80018a2:	694a      	ldr	r2, [r1, #20]
 80018a4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80018a8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80018aa:	6a8a      	ldr	r2, [r1, #40]	; 0x28
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 80018ac:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80018b0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << BDTR_BKF_SHIFT));
 80018b2:	698a      	ldr	r2, [r1, #24]
 80018b4:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 80018b8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80018bc:	6802      	ldr	r2, [r0, #0]
 80018be:	42a2      	cmp	r2, r4
 80018c0:	d003      	beq.n	80018ca <HAL_TIMEx_ConfigBreakDeadTime+0x56>
 80018c2:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80018c6:	42a2      	cmp	r2, r4
 80018c8:	d10c      	bne.n	80018e4 <HAL_TIMEx_ConfigBreakDeadTime+0x70>
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << BDTR_BK2F_SHIFT));
 80018ca:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 80018cc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80018d0:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80018d4:	69cc      	ldr	r4, [r1, #28]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80018d6:	6a09      	ldr	r1, [r1, #32]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80018d8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80018dc:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80018de:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80018e2:	430b      	orrs	r3, r1
  htim->Instance->BDTR = tmpbdtr;
 80018e4:	6453      	str	r3, [r2, #68]	; 0x44
  __HAL_UNLOCK(htim);
 80018e6:	2300      	movs	r3, #0
 80018e8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 80018ec:	4618      	mov	r0, r3
 80018ee:	bd10      	pop	{r4, pc}
  __HAL_LOCK(htim);
 80018f0:	2002      	movs	r0, #2
}
 80018f2:	bd10      	pop	{r4, pc}
 80018f4:	40010000 	.word	0x40010000

080018f8 <HAL_TIM_PWM_ConfigChannel>:
{
 80018f8:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80018fa:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 80018fe:	4604      	mov	r4, r0
 8001900:	460d      	mov	r5, r1
 8001902:	2002      	movs	r0, #2
  __HAL_LOCK(htim);
 8001904:	2b01      	cmp	r3, #1
 8001906:	d010      	beq.n	800192a <HAL_TIM_PWM_ConfigChannel+0x32>
 8001908:	2301      	movs	r3, #1
  switch (Channel)
 800190a:	2a08      	cmp	r2, #8
  htim->State = HAL_TIM_STATE_BUSY;
 800190c:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 8001910:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  switch (Channel)
 8001914:	d043      	beq.n	800199e <HAL_TIM_PWM_ConfigChannel+0xa6>
 8001916:	d809      	bhi.n	800192c <HAL_TIM_PWM_ConfigChannel+0x34>
 8001918:	b1fa      	cbz	r2, 800195a <HAL_TIM_PWM_ConfigChannel+0x62>
 800191a:	2a04      	cmp	r2, #4
 800191c:	d02e      	beq.n	800197c <HAL_TIM_PWM_ConfigChannel+0x84>
  htim->State = HAL_TIM_STATE_READY;
 800191e:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8001920:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001922:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8001926:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800192a:	bd38      	pop	{r3, r4, r5, pc}
  switch (Channel)
 800192c:	2a10      	cmp	r2, #16
 800192e:	d047      	beq.n	80019c0 <HAL_TIM_PWM_ConfigChannel+0xc8>
 8001930:	2a14      	cmp	r2, #20
 8001932:	d056      	beq.n	80019e2 <HAL_TIM_PWM_ConfigChannel+0xea>
 8001934:	2a0c      	cmp	r2, #12
 8001936:	d1f2      	bne.n	800191e <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001938:	6820      	ldr	r0, [r4, #0]
 800193a:	f7ff feb7 	bl	80016ac <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800193e:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;  
 8001940:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001942:	69da      	ldr	r2, [r3, #28]
 8001944:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001948:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800194a:	69da      	ldr	r2, [r3, #28]
 800194c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001950:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;  
 8001952:	69da      	ldr	r2, [r3, #28]
 8001954:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001958:	e030      	b.n	80019bc <HAL_TIM_PWM_ConfigChannel+0xc4>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800195a:	6820      	ldr	r0, [r4, #0]
 800195c:	f7ff fe14 	bl	8001588 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001960:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001962:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001964:	699a      	ldr	r2, [r3, #24]
 8001966:	f042 0208 	orr.w	r2, r2, #8
 800196a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800196c:	699a      	ldr	r2, [r3, #24]
 800196e:	f022 0204 	bic.w	r2, r2, #4
 8001972:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001974:	699a      	ldr	r2, [r3, #24]
 8001976:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8001978:	619a      	str	r2, [r3, #24]
    break;
 800197a:	e7d0      	b.n	800191e <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800197c:	6820      	ldr	r0, [r4, #0]
 800197e:	f7ff fe31 	bl	80015e4 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001982:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8001984:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001986:	699a      	ldr	r2, [r3, #24]
 8001988:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800198c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800198e:	699a      	ldr	r2, [r3, #24]
 8001990:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001994:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8001996:	699a      	ldr	r2, [r3, #24]
 8001998:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800199c:	e7ec      	b.n	8001978 <HAL_TIM_PWM_ConfigChannel+0x80>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800199e:	6820      	ldr	r0, [r4, #0]
 80019a0:	f7ff fe52 	bl	8001648 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80019a4:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 80019a6:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80019a8:	69da      	ldr	r2, [r3, #28]
 80019aa:	f042 0208 	orr.w	r2, r2, #8
 80019ae:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80019b0:	69da      	ldr	r2, [r3, #28]
 80019b2:	f022 0204 	bic.w	r2, r2, #4
 80019b6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 80019b8:	69da      	ldr	r2, [r3, #28]
 80019ba:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;  
 80019bc:	61da      	str	r2, [r3, #28]
    break;
 80019be:	e7ae      	b.n	800191e <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80019c0:	6820      	ldr	r0, [r4, #0]
 80019c2:	f7ff fecf 	bl	8001764 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80019c6:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode;  
 80019c8:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80019ca:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80019cc:	f042 0208 	orr.w	r2, r2, #8
 80019d0:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80019d2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80019d4:	f022 0204 	bic.w	r2, r2, #4
 80019d8:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;  
 80019da:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80019dc:	430a      	orrs	r2, r1
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8;  
 80019de:	655a      	str	r2, [r3, #84]	; 0x54
    break;
 80019e0:	e79d      	b.n	800191e <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80019e2:	6820      	ldr	r0, [r4, #0]
 80019e4:	f7ff fee6 	bl	80017b4 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80019e8:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8;  
 80019ea:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80019ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80019ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80019f2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80019f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80019f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80019fa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8;  
 80019fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80019fe:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001a02:	e7ec      	b.n	80019de <HAL_TIM_PWM_ConfigChannel+0xe6>

08001a04 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001a04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001a08:	9d06      	ldr	r5, [sp, #24]
 8001a0a:	4604      	mov	r4, r0
 8001a0c:	460f      	mov	r7, r1
 8001a0e:	4616      	mov	r6, r2
 8001a10:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001a12:	6821      	ldr	r1, [r4, #0]
 8001a14:	69ca      	ldr	r2, [r1, #28]
 8001a16:	ea37 0302 	bics.w	r3, r7, r2
 8001a1a:	bf0c      	ite	eq
 8001a1c:	2201      	moveq	r2, #1
 8001a1e:	2200      	movne	r2, #0
 8001a20:	42b2      	cmp	r2, r6
 8001a22:	d002      	beq.n	8001a2a <UART_WaitOnFlagUntilTimeout+0x26>
        __HAL_UNLOCK(huart);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8001a24:	2000      	movs	r0, #0
}
 8001a26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 8001a2a:	1c6b      	adds	r3, r5, #1
 8001a2c:	d0f2      	beq.n	8001a14 <UART_WaitOnFlagUntilTimeout+0x10>
      if((Timeout == 0U)||((HAL_GetTick()-Tickstart) >=  Timeout))
 8001a2e:	b99d      	cbnz	r5, 8001a58 <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001a30:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 8001a32:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001a3a:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001a3c:	689a      	ldr	r2, [r3, #8]
 8001a3e:	f022 0201 	bic.w	r2, r2, #1
 8001a42:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8001a44:	2320      	movs	r3, #32
 8001a46:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8001a4a:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
        __HAL_UNLOCK(huart);
 8001a4e:	2300      	movs	r3, #0
 8001a50:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 8001a54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U)||((HAL_GetTick()-Tickstart) >=  Timeout))
 8001a58:	f7fe fda6 	bl	80005a8 <HAL_GetTick>
 8001a5c:	eba0 0008 	sub.w	r0, r0, r8
 8001a60:	4285      	cmp	r5, r0
 8001a62:	d8d6      	bhi.n	8001a12 <UART_WaitOnFlagUntilTimeout+0xe>
 8001a64:	e7e4      	b.n	8001a30 <UART_WaitOnFlagUntilTimeout+0x2c>

08001a66 <HAL_UART_Transmit>:
{
 8001a66:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8001a6a:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY)
 8001a6c:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
{
 8001a70:	4604      	mov	r4, r0
 8001a72:	460d      	mov	r5, r1
  if(huart->gState == HAL_UART_STATE_READY)
 8001a74:	2b20      	cmp	r3, #32
{
 8001a76:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY)
 8001a78:	d14c      	bne.n	8001b14 <HAL_UART_Transmit+0xae>
    if((pData == NULL ) || (Size == 0U))
 8001a7a:	2900      	cmp	r1, #0
 8001a7c:	d048      	beq.n	8001b10 <HAL_UART_Transmit+0xaa>
 8001a7e:	2a00      	cmp	r2, #0
 8001a80:	d046      	beq.n	8001b10 <HAL_UART_Transmit+0xaa>
    __HAL_LOCK(huart);
 8001a82:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8001a86:	2b01      	cmp	r3, #1
 8001a88:	d044      	beq.n	8001b14 <HAL_UART_Transmit+0xae>
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a90:	2300      	movs	r3, #0
 8001a92:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001a94:	2321      	movs	r3, #33	; 0x21
 8001a96:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
    tickstart = HAL_GetTick();
 8001a9a:	f7fe fd85 	bl	80005a8 <HAL_GetTick>
 8001a9e:	4606      	mov	r6, r0
    huart->TxXferSize = Size;
 8001aa0:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    huart->TxXferCount = Size;
 8001aa4:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 8001aa8:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 8001aac:	b292      	uxth	r2, r2
 8001aae:	b962      	cbnz	r2, 8001aca <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001ab0:	9700      	str	r7, [sp, #0]
 8001ab2:	4633      	mov	r3, r6
 8001ab4:	2140      	movs	r1, #64	; 0x40
 8001ab6:	4620      	mov	r0, r4
 8001ab8:	f7ff ffa4 	bl	8001a04 <UART_WaitOnFlagUntilTimeout>
 8001abc:	b998      	cbnz	r0, 8001ae6 <HAL_UART_Transmit+0x80>
    huart->gState = HAL_UART_STATE_READY;
 8001abe:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8001ac0:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
    huart->gState = HAL_UART_STATE_READY;
 8001ac4:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
    return HAL_OK;
 8001ac8:	e00e      	b.n	8001ae8 <HAL_UART_Transmit+0x82>
      huart->TxXferCount--;
 8001aca:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	9700      	str	r7, [sp, #0]
 8001ad2:	2180      	movs	r1, #128	; 0x80
      huart->TxXferCount--;
 8001ad4:	3b01      	subs	r3, #1
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001ad6:	4620      	mov	r0, r4
      huart->TxXferCount--;
 8001ad8:	b29b      	uxth	r3, r3
 8001ada:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001ade:	4633      	mov	r3, r6
 8001ae0:	f7ff ff90 	bl	8001a04 <UART_WaitOnFlagUntilTimeout>
 8001ae4:	b118      	cbz	r0, 8001aee <HAL_UART_Transmit+0x88>
        return HAL_TIMEOUT;
 8001ae6:	2003      	movs	r0, #3
}
 8001ae8:	b002      	add	sp, #8
 8001aea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001aee:	68a3      	ldr	r3, [r4, #8]
 8001af0:	6822      	ldr	r2, [r4, #0]
 8001af2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001af6:	d107      	bne.n	8001b08 <HAL_UART_Transmit+0xa2>
 8001af8:	6923      	ldr	r3, [r4, #16]
 8001afa:	b92b      	cbnz	r3, 8001b08 <HAL_UART_Transmit+0xa2>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8001afc:	f835 3b02 	ldrh.w	r3, [r5], #2
 8001b00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b04:	6293      	str	r3, [r2, #40]	; 0x28
        pData += 2;
 8001b06:	e7cf      	b.n	8001aa8 <HAL_UART_Transmit+0x42>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8001b08:	782b      	ldrb	r3, [r5, #0]
 8001b0a:	3501      	adds	r5, #1
 8001b0c:	6293      	str	r3, [r2, #40]	; 0x28
 8001b0e:	e7cb      	b.n	8001aa8 <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8001b10:	2001      	movs	r0, #1
 8001b12:	e7e9      	b.n	8001ae8 <HAL_UART_Transmit+0x82>
    return HAL_BUSY;
 8001b14:	2002      	movs	r0, #2
 8001b16:	e7e7      	b.n	8001ae8 <HAL_UART_Transmit+0x82>

08001b18 <UART_SetConfig>:
  * @brief Configure the UART peripheral
  * @param huart uart handle
  * @retval None
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001b18:	b538      	push	{r3, r4, r5, lr}
 8001b1a:	4604      	mov	r4, r0
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001b1c:	6805      	ldr	r5, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001b1e:	69c3      	ldr	r3, [r0, #28]
 8001b20:	6921      	ldr	r1, [r4, #16]
 8001b22:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001b24:	6828      	ldr	r0, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001b26:	430a      	orrs	r2, r1
 8001b28:	6961      	ldr	r1, [r4, #20]
 8001b2a:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001b2c:	4993      	ldr	r1, [pc, #588]	; (8001d7c <UART_SetConfig+0x264>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001b2e:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001b30:	4001      	ands	r1, r0
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8001b32:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001b34:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001b36:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001b38:	602a      	str	r2, [r5, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001b3a:	686a      	ldr	r2, [r5, #4]
 8001b3c:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001b40:	430a      	orrs	r2, r1
 8001b42:	606a      	str	r2, [r5, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8001b44:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8001b46:	68a9      	ldr	r1, [r5, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8001b48:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8001b4a:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 8001b4e:	430a      	orrs	r2, r1
 8001b50:	60aa      	str	r2, [r5, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001b52:	4a8b      	ldr	r2, [pc, #556]	; (8001d80 <UART_SetConfig+0x268>)
 8001b54:	4295      	cmp	r5, r2
 8001b56:	d119      	bne.n	8001b8c <UART_SetConfig+0x74>
 8001b58:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8001b5c:	4989      	ldr	r1, [pc, #548]	; (8001d84 <UART_SetConfig+0x26c>)
 8001b5e:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8001b62:	f002 0203 	and.w	r2, r2, #3

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001b66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b6a:	5c8a      	ldrb	r2, [r1, r2]
 8001b6c:	f040 80b3 	bne.w	8001cd6 <UART_SetConfig+0x1be>
  {
    switch (clocksource)
 8001b70:	2a08      	cmp	r2, #8
 8001b72:	f200 80ad 	bhi.w	8001cd0 <UART_SetConfig+0x1b8>
 8001b76:	e8df f012 	tbh	[pc, r2, lsl #1]
 8001b7a:	0026      	.short	0x0026
 8001b7c:	00e9007b 	.word	0x00e9007b
 8001b80:	00f500ab 	.word	0x00f500ab
 8001b84:	00ab00ab 	.word	0x00ab00ab
 8001b88:	00fb00ab 	.word	0x00fb00ab
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001b8c:	4a7e      	ldr	r2, [pc, #504]	; (8001d88 <UART_SetConfig+0x270>)
 8001b8e:	4295      	cmp	r5, r2
 8001b90:	d107      	bne.n	8001ba2 <UART_SetConfig+0x8a>
 8001b92:	f502 32fa 	add.w	r2, r2, #128000	; 0x1f400
 8001b96:	497d      	ldr	r1, [pc, #500]	; (8001d8c <UART_SetConfig+0x274>)
 8001b98:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8001b9c:	f002 020c 	and.w	r2, r2, #12
 8001ba0:	e7e1      	b.n	8001b66 <UART_SetConfig+0x4e>
 8001ba2:	4a7b      	ldr	r2, [pc, #492]	; (8001d90 <UART_SetConfig+0x278>)
 8001ba4:	4295      	cmp	r5, r2
 8001ba6:	d12b      	bne.n	8001c00 <UART_SetConfig+0xe8>
 8001ba8:	f502 32f8 	add.w	r2, r2, #126976	; 0x1f000
 8001bac:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8001bb0:	f002 0230 	and.w	r2, r2, #48	; 0x30
 8001bb4:	2a10      	cmp	r2, #16
 8001bb6:	f000 80d2 	beq.w	8001d5e <UART_SetConfig+0x246>
 8001bba:	d816      	bhi.n	8001bea <UART_SetConfig+0xd2>
 8001bbc:	b9da      	cbnz	r2, 8001bf6 <UART_SetConfig+0xde>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001bbe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001bc2:	f040 809f 	bne.w	8001d04 <UART_SetConfig+0x1ec>
    {
    case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001bc6:	f7ff fa0d 	bl	8000fe4 <HAL_RCC_GetPCLK1Freq>
      break;
    case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001bca:	6861      	ldr	r1, [r4, #4]
 8001bcc:	084a      	lsrs	r2, r1, #1
 8001bce:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 8001bd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bd6:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001bd8:	2000      	movs	r0, #0
    default:
        ret = HAL_ERROR;
      break;
    }

    brrtemp = usartdiv & 0xFFF0U;
 8001bda:	f023 020f 	bic.w	r2, r3, #15
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001bde:	f3c3 0342 	ubfx	r3, r3, #1, #3
    huart->Instance->BRR = brrtemp;
 8001be2:	6821      	ldr	r1, [r4, #0]
 8001be4:	4313      	orrs	r3, r2
 8001be6:	60cb      	str	r3, [r1, #12]
 8001be8:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001bea:	2a20      	cmp	r2, #32
 8001bec:	f000 80ab 	beq.w	8001d46 <UART_SetConfig+0x22e>
 8001bf0:	2a30      	cmp	r2, #48	; 0x30
 8001bf2:	f000 80ba 	beq.w	8001d6a <UART_SetConfig+0x252>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001bf6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001bfa:	d069      	beq.n	8001cd0 <UART_SetConfig+0x1b8>
    case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
      break;
      case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 8001bfc:	2001      	movs	r0, #1
    }
  }

  return ret;

}
 8001bfe:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001c00:	4a64      	ldr	r2, [pc, #400]	; (8001d94 <UART_SetConfig+0x27c>)
 8001c02:	4295      	cmp	r5, r2
 8001c04:	d10e      	bne.n	8001c24 <UART_SetConfig+0x10c>
 8001c06:	f502 32f6 	add.w	r2, r2, #125952	; 0x1ec00
 8001c0a:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8001c0e:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 8001c12:	2a40      	cmp	r2, #64	; 0x40
 8001c14:	f000 80a3 	beq.w	8001d5e <UART_SetConfig+0x246>
 8001c18:	d9d0      	bls.n	8001bbc <UART_SetConfig+0xa4>
 8001c1a:	2a80      	cmp	r2, #128	; 0x80
 8001c1c:	f000 8093 	beq.w	8001d46 <UART_SetConfig+0x22e>
 8001c20:	2ac0      	cmp	r2, #192	; 0xc0
 8001c22:	e7e6      	b.n	8001bf2 <UART_SetConfig+0xda>
 8001c24:	4a5c      	ldr	r2, [pc, #368]	; (8001d98 <UART_SetConfig+0x280>)
 8001c26:	4295      	cmp	r5, r2
 8001c28:	d110      	bne.n	8001c4c <UART_SetConfig+0x134>
 8001c2a:	f502 32f4 	add.w	r2, r2, #124928	; 0x1e800
 8001c2e:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8001c32:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001c36:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8001c3a:	f000 8090 	beq.w	8001d5e <UART_SetConfig+0x246>
 8001c3e:	d9bd      	bls.n	8001bbc <UART_SetConfig+0xa4>
 8001c40:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8001c44:	d07f      	beq.n	8001d46 <UART_SetConfig+0x22e>
 8001c46:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8001c4a:	e7d2      	b.n	8001bf2 <UART_SetConfig+0xda>
 8001c4c:	4a53      	ldr	r2, [pc, #332]	; (8001d9c <UART_SetConfig+0x284>)
 8001c4e:	4295      	cmp	r5, r2
 8001c50:	d117      	bne.n	8001c82 <UART_SetConfig+0x16a>
 8001c52:	f502 3292 	add.w	r2, r2, #74752	; 0x12400
 8001c56:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8001c5a:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 8001c5e:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8001c62:	d07c      	beq.n	8001d5e <UART_SetConfig+0x246>
 8001c64:	d807      	bhi.n	8001c76 <UART_SetConfig+0x15e>
 8001c66:	2a00      	cmp	r2, #0
 8001c68:	d1c5      	bne.n	8001bf6 <UART_SetConfig+0xde>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001c6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c6e:	d154      	bne.n	8001d1a <UART_SetConfig+0x202>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001c70:	f7ff f9c8 	bl	8001004 <HAL_RCC_GetPCLK2Freq>
 8001c74:	e7a9      	b.n	8001bca <UART_SetConfig+0xb2>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001c76:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8001c7a:	d064      	beq.n	8001d46 <UART_SetConfig+0x22e>
 8001c7c:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 8001c80:	e7b7      	b.n	8001bf2 <UART_SetConfig+0xda>
 8001c82:	4a47      	ldr	r2, [pc, #284]	; (8001da0 <UART_SetConfig+0x288>)
 8001c84:	4295      	cmp	r5, r2
 8001c86:	d10f      	bne.n	8001ca8 <UART_SetConfig+0x190>
 8001c88:	f502 32e0 	add.w	r2, r2, #114688	; 0x1c000
 8001c8c:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8001c90:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
 8001c94:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8001c98:	d061      	beq.n	8001d5e <UART_SetConfig+0x246>
 8001c9a:	d98f      	bls.n	8001bbc <UART_SetConfig+0xa4>
 8001c9c:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8001ca0:	d051      	beq.n	8001d46 <UART_SetConfig+0x22e>
 8001ca2:	f5b2 5f40 	cmp.w	r2, #12288	; 0x3000
 8001ca6:	e7a4      	b.n	8001bf2 <UART_SetConfig+0xda>
 8001ca8:	4a3e      	ldr	r2, [pc, #248]	; (8001da4 <UART_SetConfig+0x28c>)
 8001caa:	4295      	cmp	r5, r2
 8001cac:	d1a3      	bne.n	8001bf6 <UART_SetConfig+0xde>
 8001cae:	f502 32de 	add.w	r2, r2, #113664	; 0x1bc00
 8001cb2:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8001cb6:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 8001cba:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8001cbe:	d04e      	beq.n	8001d5e <UART_SetConfig+0x246>
 8001cc0:	f67f af7c 	bls.w	8001bbc <UART_SetConfig+0xa4>
 8001cc4:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001cc8:	d03d      	beq.n	8001d46 <UART_SetConfig+0x22e>
 8001cca:	f5b2 4f40 	cmp.w	r2, #49152	; 0xc000
 8001cce:	e790      	b.n	8001bf2 <UART_SetConfig+0xda>
        ret = HAL_ERROR;
 8001cd0:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	e781      	b.n	8001bda <UART_SetConfig+0xc2>
    switch (clocksource)
 8001cd6:	2a08      	cmp	r2, #8
 8001cd8:	d890      	bhi.n	8001bfc <UART_SetConfig+0xe4>
 8001cda:	a301      	add	r3, pc, #4	; (adr r3, 8001ce0 <UART_SetConfig+0x1c8>)
 8001cdc:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 8001ce0:	08001d05 	.word	0x08001d05
 8001ce4:	08001d1b 	.word	0x08001d1b
 8001ce8:	08001d21 	.word	0x08001d21
 8001cec:	08001bfd 	.word	0x08001bfd
 8001cf0:	08001d37 	.word	0x08001d37
 8001cf4:	08001bfd 	.word	0x08001bfd
 8001cf8:	08001bfd 	.word	0x08001bfd
 8001cfc:	08001bfd 	.word	0x08001bfd
 8001d00:	08001d3d 	.word	0x08001d3d
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001d04:	f7ff f96e 	bl	8000fe4 <HAL_RCC_GetPCLK1Freq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001d08:	6863      	ldr	r3, [r4, #4]
 8001d0a:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8001d0e:	fbb0 f0f3 	udiv	r0, r0, r3
 8001d12:	b280      	uxth	r0, r0
 8001d14:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8001d16:	2000      	movs	r0, #0
      break;
 8001d18:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001d1a:	f7ff f973 	bl	8001004 <HAL_RCC_GetPCLK2Freq>
 8001d1e:	e7f3      	b.n	8001d08 <UART_SetConfig+0x1f0>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8001d20:	6862      	ldr	r2, [r4, #4]
 8001d22:	0853      	lsrs	r3, r2, #1
 8001d24:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8001d28:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001d2c:	fbb3 f3f2 	udiv	r3, r3, r2
 8001d30:	b29b      	uxth	r3, r3
 8001d32:	60eb      	str	r3, [r5, #12]
 8001d34:	e7ef      	b.n	8001d16 <UART_SetConfig+0x1fe>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001d36:	f7ff f889 	bl	8000e4c <HAL_RCC_GetSysClockFreq>
 8001d3a:	e7e5      	b.n	8001d08 <UART_SetConfig+0x1f0>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001d3c:	6862      	ldr	r2, [r4, #4]
 8001d3e:	0853      	lsrs	r3, r2, #1
 8001d40:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001d44:	e7f2      	b.n	8001d2c <UART_SetConfig+0x214>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001d46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d4a:	d1e9      	bne.n	8001d20 <UART_SetConfig+0x208>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8001d4c:	6860      	ldr	r0, [r4, #4]
 8001d4e:	0843      	lsrs	r3, r0, #1
 8001d50:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8001d54:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001d58:	fbb3 f3f0 	udiv	r3, r3, r0
 8001d5c:	e73b      	b.n	8001bd6 <UART_SetConfig+0xbe>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001d5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d62:	d1e8      	bne.n	8001d36 <UART_SetConfig+0x21e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001d64:	f7ff f872 	bl	8000e4c <HAL_RCC_GetSysClockFreq>
 8001d68:	e72f      	b.n	8001bca <UART_SetConfig+0xb2>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001d6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d6e:	d1e5      	bne.n	8001d3c <UART_SetConfig+0x224>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001d70:	6860      	ldr	r0, [r4, #4]
 8001d72:	0843      	lsrs	r3, r0, #1
 8001d74:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001d78:	e7ee      	b.n	8001d58 <UART_SetConfig+0x240>
 8001d7a:	bf00      	nop
 8001d7c:	efff69f3 	.word	0xefff69f3
 8001d80:	40011000 	.word	0x40011000
 8001d84:	080028b0 	.word	0x080028b0
 8001d88:	40004400 	.word	0x40004400
 8001d8c:	080028b4 	.word	0x080028b4
 8001d90:	40004800 	.word	0x40004800
 8001d94:	40004c00 	.word	0x40004c00
 8001d98:	40005000 	.word	0x40005000
 8001d9c:	40011400 	.word	0x40011400
 8001da0:	40007800 	.word	0x40007800
 8001da4:	40007c00 	.word	0x40007c00

08001da8 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001da8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001daa:	07da      	lsls	r2, r3, #31
{
 8001dac:	b510      	push	{r4, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001dae:	d506      	bpl.n	8001dbe <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001db0:	6801      	ldr	r1, [r0, #0]
 8001db2:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8001db4:	684a      	ldr	r2, [r1, #4]
 8001db6:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001dba:	4322      	orrs	r2, r4
 8001dbc:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001dbe:	079c      	lsls	r4, r3, #30
 8001dc0:	d506      	bpl.n	8001dd0 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001dc2:	6801      	ldr	r1, [r0, #0]
 8001dc4:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8001dc6:	684a      	ldr	r2, [r1, #4]
 8001dc8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001dcc:	4322      	orrs	r2, r4
 8001dce:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001dd0:	0759      	lsls	r1, r3, #29
 8001dd2:	d506      	bpl.n	8001de2 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001dd4:	6801      	ldr	r1, [r0, #0]
 8001dd6:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8001dd8:	684a      	ldr	r2, [r1, #4]
 8001dda:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001dde:	4322      	orrs	r2, r4
 8001de0:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001de2:	071a      	lsls	r2, r3, #28
 8001de4:	d506      	bpl.n	8001df4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001de6:	6801      	ldr	r1, [r0, #0]
 8001de8:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8001dea:	684a      	ldr	r2, [r1, #4]
 8001dec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001df0:	4322      	orrs	r2, r4
 8001df2:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001df4:	06dc      	lsls	r4, r3, #27
 8001df6:	d506      	bpl.n	8001e06 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001df8:	6801      	ldr	r1, [r0, #0]
 8001dfa:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8001dfc:	688a      	ldr	r2, [r1, #8]
 8001dfe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001e02:	4322      	orrs	r2, r4
 8001e04:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001e06:	0699      	lsls	r1, r3, #26
 8001e08:	d506      	bpl.n	8001e18 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001e0a:	6801      	ldr	r1, [r0, #0]
 8001e0c:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8001e0e:	688a      	ldr	r2, [r1, #8]
 8001e10:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001e14:	4322      	orrs	r2, r4
 8001e16:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001e18:	065a      	lsls	r2, r3, #25
 8001e1a:	d510      	bpl.n	8001e3e <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001e1c:	6801      	ldr	r1, [r0, #0]
 8001e1e:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8001e20:	684a      	ldr	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001e22:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001e26:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8001e2a:	ea42 0204 	orr.w	r2, r2, r4
 8001e2e:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001e30:	d105      	bne.n	8001e3e <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001e32:	684a      	ldr	r2, [r1, #4]
 8001e34:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001e36:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8001e3a:	4322      	orrs	r2, r4
 8001e3c:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001e3e:	061b      	lsls	r3, r3, #24
 8001e40:	d506      	bpl.n	8001e50 <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001e42:	6802      	ldr	r2, [r0, #0]
 8001e44:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8001e46:	6853      	ldr	r3, [r2, #4]
 8001e48:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8001e4c:	430b      	orrs	r3, r1
 8001e4e:	6053      	str	r3, [r2, #4]
 8001e50:	bd10      	pop	{r4, pc}

08001e52 <UART_CheckIdleState>:
  * @brief Check the UART Idle State
  * @param huart uart handle
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8001e52:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t tickstart = 0U;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e54:	2500      	movs	r5, #0
{
 8001e56:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e58:	66c5      	str	r5, [r0, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8001e5a:	f7fe fba5 	bl	80005a8 <HAL_GetTick>

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001e5e:	6822      	ldr	r2, [r4, #0]
  tickstart = HAL_GetTick();
 8001e60:	4603      	mov	r3, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001e62:	6812      	ldr	r2, [r2, #0]
 8001e64:	0712      	lsls	r2, r2, #28
 8001e66:	d409      	bmi.n	8001e7c <UART_CheckIdleState+0x2a>
      return HAL_TIMEOUT;
    }
  }

  /* Initialize the UART State */
  huart->gState= HAL_UART_STATE_READY;
 8001e68:	2320      	movs	r3, #32
  huart->RxState= HAL_UART_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8001e6a:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 8001e6c:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UNLOCK(huart);
 8001e70:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  huart->RxState= HAL_UART_STATE_READY;
 8001e74:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a

  return HAL_OK;
}
 8001e78:	b003      	add	sp, #12
 8001e7a:	bd30      	pop	{r4, r5, pc}
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001e7c:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8001e80:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8001e84:	4620      	mov	r0, r4
 8001e86:	9200      	str	r2, [sp, #0]
 8001e88:	462a      	mov	r2, r5
 8001e8a:	f7ff fdbb 	bl	8001a04 <UART_WaitOnFlagUntilTimeout>
 8001e8e:	2800      	cmp	r0, #0
 8001e90:	d0ea      	beq.n	8001e68 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8001e92:	2003      	movs	r0, #3
 8001e94:	e7f0      	b.n	8001e78 <UART_CheckIdleState+0x26>

08001e96 <HAL_UART_Init>:
{
 8001e96:	b510      	push	{r4, lr}
  if(huart == NULL)
 8001e98:	4604      	mov	r4, r0
 8001e9a:	b360      	cbz	r0, 8001ef6 <HAL_UART_Init+0x60>
  if(huart->gState == HAL_UART_STATE_RESET)
 8001e9c:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8001ea0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001ea4:	b91b      	cbnz	r3, 8001eae <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001ea6:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 8001eaa:	f000 fbb7 	bl	800261c <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8001eae:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001eb0:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001eb2:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 8001eb4:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 8001eb8:	6813      	ldr	r3, [r2, #0]
 8001eba:	f023 0301 	bic.w	r3, r3, #1
 8001ebe:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001ec0:	f7ff fe2a 	bl	8001b18 <UART_SetConfig>
 8001ec4:	2801      	cmp	r0, #1
 8001ec6:	d016      	beq.n	8001ef6 <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001ec8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001eca:	b113      	cbz	r3, 8001ed2 <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 8001ecc:	4620      	mov	r0, r4
 8001ece:	f7ff ff6b 	bl	8001da8 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001ed2:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 8001ed4:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001ed6:	685a      	ldr	r2, [r3, #4]
 8001ed8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001edc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001ede:	689a      	ldr	r2, [r3, #8]
 8001ee0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001ee4:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8001ee6:	681a      	ldr	r2, [r3, #0]
 8001ee8:	f042 0201 	orr.w	r2, r2, #1
}
 8001eec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 8001ef0:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8001ef2:	f7ff bfae 	b.w	8001e52 <UART_CheckIdleState>
}
 8001ef6:	2001      	movs	r0, #1
 8001ef8:	bd10      	pop	{r4, pc}
	...

08001efc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8001efc:	4b0a      	ldr	r3, [pc, #40]	; (8001f28 <USB_CoreReset+0x2c>)
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8001efe:	3b01      	subs	r3, #1
 8001f00:	d101      	bne.n	8001f06 <USB_CoreReset+0xa>
    {
      return HAL_TIMEOUT;
 8001f02:	2003      	movs	r0, #3
 8001f04:	4770      	bx	lr
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8001f06:	6902      	ldr	r2, [r0, #16]
 8001f08:	2a00      	cmp	r2, #0
 8001f0a:	daf8      	bge.n	8001efe <USB_CoreReset+0x2>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8001f0c:	6903      	ldr	r3, [r0, #16]
 8001f0e:	4a06      	ldr	r2, [pc, #24]	; (8001f28 <USB_CoreReset+0x2c>)
 8001f10:	f043 0301 	orr.w	r3, r3, #1
 8001f14:	6103      	str	r3, [r0, #16]

  do
  {
    if (++count > 200000U)
 8001f16:	3a01      	subs	r2, #1
 8001f18:	d0f3      	beq.n	8001f02 <USB_CoreReset+0x6>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8001f1a:	6903      	ldr	r3, [r0, #16]
 8001f1c:	f013 0301 	ands.w	r3, r3, #1
 8001f20:	d1f9      	bne.n	8001f16 <USB_CoreReset+0x1a>

  return HAL_OK;
 8001f22:	4618      	mov	r0, r3
}
 8001f24:	4770      	bx	lr
 8001f26:	bf00      	nop
 8001f28:	00030d41 	.word	0x00030d41

08001f2c <USB_CoreInit>:
{
 8001f2c:	b084      	sub	sp, #16
 8001f2e:	b538      	push	{r3, r4, r5, lr}
 8001f30:	ad05      	add	r5, sp, #20
 8001f32:	4604      	mov	r4, r0
 8001f34:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8001f38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001f3a:	2b01      	cmp	r3, #1
 8001f3c:	d127      	bne.n	8001f8e <USB_CoreInit+0x62>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8001f3e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8001f40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f44:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8001f46:	68c3      	ldr	r3, [r0, #12]
 8001f48:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8001f4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001f50:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8001f52:	68c3      	ldr	r3, [r0, #12]
 8001f54:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8001f58:	60c3      	str	r3, [r0, #12]
    if(cfg.use_external_vbus == 1U)
 8001f5a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8001f5c:	2b01      	cmp	r3, #1
 8001f5e:	d103      	bne.n	8001f68 <USB_CoreInit+0x3c>
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8001f60:	68c3      	ldr	r3, [r0, #12]
 8001f62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001f66:	60c3      	str	r3, [r0, #12]
    (void)USB_CoreReset(USBx);
 8001f68:	4620      	mov	r0, r4
 8001f6a:	f7ff ffc7 	bl	8001efc <USB_CoreReset>
  if(cfg.dma_enable == 1U)
 8001f6e:	9b08      	ldr	r3, [sp, #32]
 8001f70:	2b01      	cmp	r3, #1
 8001f72:	d107      	bne.n	8001f84 <USB_CoreInit+0x58>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8001f74:	68a3      	ldr	r3, [r4, #8]
 8001f76:	f043 0306 	orr.w	r3, r3, #6
 8001f7a:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8001f7c:	68a3      	ldr	r3, [r4, #8]
 8001f7e:	f043 0320 	orr.w	r3, r3, #32
 8001f82:	60a3      	str	r3, [r4, #8]
}
 8001f84:	2000      	movs	r0, #0
 8001f86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001f8a:	b004      	add	sp, #16
 8001f8c:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8001f8e:	68c3      	ldr	r3, [r0, #12]
 8001f90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f94:	60c3      	str	r3, [r0, #12]
    (void)USB_CoreReset(USBx);
 8001f96:	f7ff ffb1 	bl	8001efc <USB_CoreReset>
    USBx->GCCFG = USB_OTG_GCCFG_PWRDWN;
 8001f9a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f9e:	63a3      	str	r3, [r4, #56]	; 0x38
 8001fa0:	e7e5      	b.n	8001f6e <USB_CoreInit+0x42>

08001fa2 <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8001fa2:	6883      	ldr	r3, [r0, #8]
 8001fa4:	f023 0301 	bic.w	r3, r3, #1
 8001fa8:	6083      	str	r3, [r0, #8]
}
 8001faa:	2000      	movs	r0, #0
 8001fac:	4770      	bx	lr

08001fae <USB_SetCurrentMode>:
{
 8001fae:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8001fb0:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8001fb2:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8001fb4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8001fb8:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8001fba:	d108      	bne.n	8001fce <USB_SetCurrentMode+0x20>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8001fbc:	68c3      	ldr	r3, [r0, #12]
 8001fbe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8001fc2:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
 8001fc4:	2032      	movs	r0, #50	; 0x32
 8001fc6:	f7fe faf5 	bl	80005b4 <HAL_Delay>
  return HAL_OK;
 8001fca:	2000      	movs	r0, #0
 8001fcc:	bd08      	pop	{r3, pc}
  else if (mode == USB_DEVICE_MODE)
 8001fce:	b919      	cbnz	r1, 8001fd8 <USB_SetCurrentMode+0x2a>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8001fd0:	68c3      	ldr	r3, [r0, #12]
 8001fd2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001fd6:	e7f4      	b.n	8001fc2 <USB_SetCurrentMode+0x14>
    return HAL_ERROR;
 8001fd8:	2001      	movs	r0, #1
}
 8001fda:	bd08      	pop	{r3, pc}

08001fdc <USB_FlushTxFifo>:
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8001fdc:	0189      	lsls	r1, r1, #6
 8001fde:	4a07      	ldr	r2, [pc, #28]	; (8001ffc <USB_FlushTxFifo+0x20>)
 8001fe0:	f041 0120 	orr.w	r1, r1, #32
 8001fe4:	6101      	str	r1, [r0, #16]
    if (++count > 200000U)
 8001fe6:	3a01      	subs	r2, #1
 8001fe8:	d005      	beq.n	8001ff6 <USB_FlushTxFifo+0x1a>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8001fea:	6903      	ldr	r3, [r0, #16]
 8001fec:	f013 0320 	ands.w	r3, r3, #32
 8001ff0:	d1f9      	bne.n	8001fe6 <USB_FlushTxFifo+0xa>
  return HAL_OK;
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	4770      	bx	lr
      return HAL_TIMEOUT;
 8001ff6:	2003      	movs	r0, #3
}
 8001ff8:	4770      	bx	lr
 8001ffa:	bf00      	nop
 8001ffc:	00030d41 	.word	0x00030d41

08002000 <USB_FlushRxFifo>:
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8002000:	2310      	movs	r3, #16
 8002002:	4a06      	ldr	r2, [pc, #24]	; (800201c <USB_FlushRxFifo+0x1c>)
 8002004:	6103      	str	r3, [r0, #16]
    if (++count > 200000U)
 8002006:	3a01      	subs	r2, #1
 8002008:	d005      	beq.n	8002016 <USB_FlushRxFifo+0x16>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800200a:	6903      	ldr	r3, [r0, #16]
 800200c:	f013 0310 	ands.w	r3, r3, #16
 8002010:	d1f9      	bne.n	8002006 <USB_FlushRxFifo+0x6>
  return HAL_OK;
 8002012:	4618      	mov	r0, r3
 8002014:	4770      	bx	lr
      return HAL_TIMEOUT;
 8002016:	2003      	movs	r0, #3
}
 8002018:	4770      	bx	lr
 800201a:	bf00      	nop
 800201c:	00030d41 	.word	0x00030d41

08002020 <USB_SetDevSpeed>:
  USBx_DEVICE->DCFG |= speed;
 8002020:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8002024:	4319      	orrs	r1, r3
 8002026:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 800202a:	2000      	movs	r0, #0
 800202c:	4770      	bx	lr
	...

08002030 <USB_DevInit>:
{
 8002030:	b084      	sub	sp, #16
 8002032:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002036:	4604      	mov	r4, r0
 8002038:	a809      	add	r0, sp, #36	; 0x24
 800203a:	4688      	mov	r8, r1
 800203c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  for (i = 0U; i < 15U; i++)
 8002040:	2300      	movs	r3, #0
 8002042:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002044:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8002046:	990e      	ldr	r1, [sp, #56]	; 0x38
    USBx->DIEPTXF[i] = 0U;
 8002048:	461d      	mov	r5, r3
 800204a:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 800204c:	f103 0040 	add.w	r0, r3, #64	; 0x40
  for (i = 0U; i < 15U; i++)
 8002050:	3301      	adds	r3, #1
    USBx->DIEPTXF[i] = 0U;
 8002052:	eb04 0080 	add.w	r0, r4, r0, lsl #2
  for (i = 0U; i < 15U; i++)
 8002056:	2b0f      	cmp	r3, #15
    USBx->DIEPTXF[i] = 0U;
 8002058:	6045      	str	r5, [r0, #4]
  for (i = 0U; i < 15U; i++)
 800205a:	d1f7      	bne.n	800204c <USB_DevInit+0x1c>
  USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800205c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800205e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002062:	63a3      	str	r3, [r4, #56]	; 0x38
  if (cfg.vbus_sensing_enable == 0U)
 8002064:	b95e      	cbnz	r6, 800207e <USB_DevInit+0x4e>
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8002066:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002068:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800206c:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800206e:	6823      	ldr	r3, [r4, #0]
 8002070:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002074:	6023      	str	r3, [r4, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8002076:	6823      	ldr	r3, [r4, #0]
 8002078:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800207c:	6023      	str	r3, [r4, #0]
  USBx_PCGCCTL = 0U;
 800207e:	2300      	movs	r3, #0
  if(cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002080:	2901      	cmp	r1, #1
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8002082:	f504 6500 	add.w	r5, r4, #2048	; 0x800
  USBx_PCGCCTL = 0U;
 8002086:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800208a:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 800208e:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  if(cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002092:	d158      	bne.n	8002146 <USB_DevInit+0x116>
    if(cfg.speed == USB_OTG_SPEED_HIGH)
 8002094:	2a00      	cmp	r2, #0
 8002096:	d154      	bne.n	8002142 <USB_DevInit+0x112>
      (void)USB_SetDevSpeed (USBx, USB_OTG_SPEED_HIGH);
 8002098:	2100      	movs	r1, #0
    (void)USB_SetDevSpeed (USBx, USB_OTG_SPEED_FULL);
 800209a:	4620      	mov	r0, r4
 800209c:	f7ff ffc0 	bl	8002020 <USB_SetDevSpeed>
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 80020a0:	2110      	movs	r1, #16
 80020a2:	4620      	mov	r0, r4
 80020a4:	f7ff ff9a 	bl	8001fdc <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80020a8:	4620      	mov	r0, r4
 80020aa:	f7ff ffa9 	bl	8002000 <USB_FlushRxFifo>
  USBx_DEVICE->DIEPMSK = 0U;
 80020ae:	2300      	movs	r3, #0
 80020b0:	f504 6210 	add.w	r2, r4, #2304	; 0x900
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80020b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
      USBx_INEP(i)->DIEPCTL = 0U;
 80020b8:	4619      	mov	r1, r3
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80020ba:	f04f 6e00 	mov.w	lr, #134217728	; 0x8000000
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80020be:	f64f 3c7f 	movw	ip, #64383	; 0xfb7f
  USBx_DEVICE->DIEPMSK = 0U;
 80020c2:	612b      	str	r3, [r5, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80020c4:	616b      	str	r3, [r5, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80020c6:	61eb      	str	r3, [r5, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80020c8:	4543      	cmp	r3, r8
 80020ca:	d140      	bne.n	800214e <USB_DevInit+0x11e>
 80020cc:	2100      	movs	r1, #0
 80020ce:	f504 6230 	add.w	r2, r4, #2816	; 0xb00
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80020d2:	f04f 4e90 	mov.w	lr, #1207959552	; 0x48000000
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80020d6:	f04f 6c00 	mov.w	ip, #134217728	; 0x8000000
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80020da:	4608      	mov	r0, r1
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80020dc:	f64f 387f 	movw	r8, #64383	; 0xfb7f
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80020e0:	428b      	cmp	r3, r1
 80020e2:	d146      	bne.n	8002172 <USB_DevInit+0x142>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80020e4:	692b      	ldr	r3, [r5, #16]
  if (cfg.dma_enable == 1U)
 80020e6:	2f01      	cmp	r7, #1
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80020e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80020ec:	612b      	str	r3, [r5, #16]
  if (cfg.dma_enable == 1U)
 80020ee:	d107      	bne.n	8002100 <USB_DevInit+0xd0>
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 80020f0:	4b29      	ldr	r3, [pc, #164]	; (8002198 <USB_DevInit+0x168>)
 80020f2:	632b      	str	r3, [r5, #48]	; 0x30
    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 80020f4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80020f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020fa:	f043 0303 	orr.w	r3, r3, #3
 80020fe:	632b      	str	r3, [r5, #48]	; 0x30
  USBx->GINTMSK = 0U;
 8002100:	2300      	movs	r3, #0
 8002102:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 8002104:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 8002108:	6163      	str	r3, [r4, #20]
  if (cfg.dma_enable == 0U)
 800210a:	b91f      	cbnz	r7, 8002114 <USB_DevInit+0xe4>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800210c:	69a3      	ldr	r3, [r4, #24]
 800210e:	f043 0310 	orr.w	r3, r3, #16
 8002112:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8002114:	69a2      	ldr	r2, [r4, #24]
 8002116:	4b21      	ldr	r3, [pc, #132]	; (800219c <USB_DevInit+0x16c>)
 8002118:	4313      	orrs	r3, r2
 800211a:	61a3      	str	r3, [r4, #24]
  if(cfg.Sof_enable != 0U)
 800211c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800211e:	b11b      	cbz	r3, 8002128 <USB_DevInit+0xf8>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8002120:	69a3      	ldr	r3, [r4, #24]
 8002122:	f043 0308 	orr.w	r3, r3, #8
 8002126:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 8002128:	2e01      	cmp	r6, #1
 800212a:	d105      	bne.n	8002138 <USB_DevInit+0x108>
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800212c:	69a3      	ldr	r3, [r4, #24]
 800212e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002132:	f043 0304 	orr.w	r3, r3, #4
 8002136:	61a3      	str	r3, [r4, #24]
}
 8002138:	2000      	movs	r0, #0
 800213a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800213e:	b004      	add	sp, #16
 8002140:	4770      	bx	lr
      (void)USB_SetDevSpeed (USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8002142:	2101      	movs	r1, #1
 8002144:	e7a9      	b.n	800209a <USB_DevInit+0x6a>
  else if(cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8002146:	2903      	cmp	r1, #3
 8002148:	d0a4      	beq.n	8002094 <USB_DevInit+0x64>
    (void)USB_SetDevSpeed (USBx, USB_OTG_SPEED_FULL);
 800214a:	2103      	movs	r1, #3
 800214c:	e7a5      	b.n	800209a <USB_DevInit+0x6a>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800214e:	f8d2 9000 	ldr.w	r9, [r2]
 8002152:	f1b9 0f00 	cmp.w	r9, #0
 8002156:	da0a      	bge.n	800216e <USB_DevInit+0x13e>
      if (i == 0U)
 8002158:	b93b      	cbnz	r3, 800216a <USB_DevInit+0x13a>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800215a:	f8c2 e000 	str.w	lr, [r2]
    USBx_INEP(i)->DIEPTSIZ = 0U;
 800215e:	6111      	str	r1, [r2, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002160:	3301      	adds	r3, #1
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8002162:	f8c2 c008 	str.w	ip, [r2, #8]
 8002166:	3220      	adds	r2, #32
 8002168:	e7ae      	b.n	80020c8 <USB_DevInit+0x98>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800216a:	6010      	str	r0, [r2, #0]
 800216c:	e7f7      	b.n	800215e <USB_DevInit+0x12e>
      USBx_INEP(i)->DIEPCTL = 0U;
 800216e:	6011      	str	r1, [r2, #0]
 8002170:	e7f5      	b.n	800215e <USB_DevInit+0x12e>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8002172:	f8d2 9000 	ldr.w	r9, [r2]
 8002176:	f1b9 0f00 	cmp.w	r9, #0
 800217a:	da0b      	bge.n	8002194 <USB_DevInit+0x164>
      if (i == 0U)
 800217c:	b939      	cbnz	r1, 800218e <USB_DevInit+0x15e>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800217e:	f8c2 c000 	str.w	ip, [r2]
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8002182:	6110      	str	r0, [r2, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002184:	3101      	adds	r1, #1
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8002186:	f8c2 8008 	str.w	r8, [r2, #8]
 800218a:	3220      	adds	r2, #32
 800218c:	e7a8      	b.n	80020e0 <USB_DevInit+0xb0>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800218e:	f8c2 e000 	str.w	lr, [r2]
 8002192:	e7f6      	b.n	8002182 <USB_DevInit+0x152>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8002194:	6010      	str	r0, [r2, #0]
 8002196:	e7f4      	b.n	8002182 <USB_DevInit+0x152>
 8002198:	00800100 	.word	0x00800100
 800219c:	803c3800 	.word	0x803c3800

080021a0 <USB_DevDisconnect>:
{
 80021a0:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80021a2:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 80021a6:	f043 0302 	orr.w	r3, r3, #2
 80021aa:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3U);
 80021ae:	2003      	movs	r0, #3
 80021b0:	f7fe fa00 	bl	80005b4 <HAL_Delay>
}
 80021b4:	2000      	movs	r0, #0
 80021b6:	bd08      	pop	{r3, pc}

080021b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80021b8:	b510      	push	{r4, lr}
 80021ba:	b0b4      	sub	sp, #208	; 0xd0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80021bc:	2230      	movs	r2, #48	; 0x30
 80021be:	2100      	movs	r1, #0
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80021c0:	2402      	movs	r4, #2
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80021c2:	a808      	add	r0, sp, #32
 80021c4:	f000 fb2d 	bl	8002822 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80021c8:	2214      	movs	r2, #20
 80021ca:	2100      	movs	r1, #0
 80021cc:	a803      	add	r0, sp, #12
 80021ce:	f000 fb28 	bl	8002822 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80021d2:	2100      	movs	r1, #0
 80021d4:	2280      	movs	r2, #128	; 0x80
 80021d6:	a814      	add	r0, sp, #80	; 0x50
 80021d8:	f000 fb23 	bl	8002822 <memset>
  HAL_PWR_EnableBkUpAccess();
 80021dc:	f7fe fc62 	bl	8000aa4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_PWR_CLK_ENABLE();
 80021e0:	4b20      	ldr	r3, [pc, #128]	; (8002264 <SystemClock_Config+0xac>)
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 216;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 9;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80021e2:	a808      	add	r0, sp, #32
  __HAL_RCC_PWR_CLK_ENABLE();
 80021e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80021e6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80021ea:	641a      	str	r2, [r3, #64]	; 0x40
 80021ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021f2:	9301      	str	r3, [sp, #4]
 80021f4:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80021f6:	4b1c      	ldr	r3, [pc, #112]	; (8002268 <SystemClock_Config+0xb0>)
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80021fe:	601a      	str	r2, [r3, #0]
 8002200:	681b      	ldr	r3, [r3, #0]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002202:	940e      	str	r4, [sp, #56]	; 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002204:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002208:	9412      	str	r4, [sp, #72]	; 0x48
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800220a:	9302      	str	r3, [sp, #8]
 800220c:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800220e:	2301      	movs	r3, #1
 8002210:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002212:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002216:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002218:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800221c:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800221e:	2304      	movs	r3, #4
 8002220:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8002222:	23d8      	movs	r3, #216	; 0xd8
 8002224:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8002226:	2309      	movs	r3, #9
 8002228:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800222a:	f7fe fc7b 	bl	8000b24 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /**Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800222e:	f7fe fc41 	bl	8000ab4 <HAL_PWREx_EnableOverDrive>
  {
    Error_Handler();
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002232:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002234:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002236:	2400      	movs	r4, #0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002238:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800223a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800223e:	2107      	movs	r1, #7
 8002240:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002242:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002244:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002248:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800224a:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800224c:	f7fe fe2c 	bl	8000ea8 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_I2C1
 8002250:	4b06      	ldr	r3, [pc, #24]	; (800226c <SystemClock_Config+0xb4>)
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002252:	a814      	add	r0, sp, #80	; 0x50
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002254:	9425      	str	r4, [sp, #148]	; 0x94
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_I2C1
 8002256:	9314      	str	r3, [sp, #80]	; 0x50
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002258:	942b      	str	r4, [sp, #172]	; 0xac
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800225a:	9431      	str	r4, [sp, #196]	; 0xc4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800225c:	f7fe fee2 	bl	8001024 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8002260:	b034      	add	sp, #208	; 0xd0
 8002262:	bd10      	pop	{r4, pc}
 8002264:	40023800 	.word	0x40023800
 8002268:	40007000 	.word	0x40007000
 800226c:	00204100 	.word	0x00204100

08002270 <main>:
{
 8002270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002274:	b0aa      	sub	sp, #168	; 0xa8
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002276:	2400      	movs	r4, #0
  HAL_Init();
 8002278:	f7fe f97e 	bl	8000578 <HAL_Init>
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800227c:	f44f 5900 	mov.w	r9, #8192	; 0x2000
  SystemClock_Config();
 8002280:	f7ff ff9a 	bl	80021b8 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002284:	2214      	movs	r2, #20
 8002286:	2100      	movs	r1, #0
 8002288:	a811      	add	r0, sp, #68	; 0x44
 800228a:	f000 faca 	bl	8002822 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800228e:	4b90      	ldr	r3, [pc, #576]	; (80024d0 <main+0x260>)
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002290:	2181      	movs	r1, #129	; 0x81
 8002292:	4890      	ldr	r0, [pc, #576]	; (80024d4 <main+0x264>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002294:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : LD1_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002296:	2701      	movs	r7, #1
  huart3.Instance = USART3;
 8002298:	4e8f      	ldr	r6, [pc, #572]	; (80024d8 <main+0x268>)
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800229a:	f04f 0802 	mov.w	r8, #2
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800229e:	f042 0204 	orr.w	r2, r2, #4
  hi2c1.Instance = I2C1;
 80022a2:	4d8e      	ldr	r5, [pc, #568]	; (80024dc <main+0x26c>)
  htim1.Instance = TIM1;
 80022a4:	f8df a25c 	ldr.w	sl, [pc, #604]	; 8002504 <main+0x294>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80022a8:	631a      	str	r2, [r3, #48]	; 0x30
 80022aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022ac:	f002 0204 	and.w	r2, r2, #4
 80022b0:	9201      	str	r2, [sp, #4]
 80022b2:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80022b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022b6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80022ba:	631a      	str	r2, [r3, #48]	; 0x30
 80022bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022be:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80022c2:	9202      	str	r2, [sp, #8]
 80022c4:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80022c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022c8:	f042 0202 	orr.w	r2, r2, #2
 80022cc:	631a      	str	r2, [r3, #48]	; 0x30
 80022ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022d0:	f002 0202 	and.w	r2, r2, #2
 80022d4:	9203      	str	r2, [sp, #12]
 80022d6:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80022d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022da:	f042 0208 	orr.w	r2, r2, #8
 80022de:	631a      	str	r2, [r3, #48]	; 0x30
 80022e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022e2:	f002 0208 	and.w	r2, r2, #8
 80022e6:	9204      	str	r2, [sp, #16]
 80022e8:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80022ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80022f0:	631a      	str	r2, [r3, #48]	; 0x30
 80022f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022f4:	f002 0240 	and.w	r2, r2, #64	; 0x40
 80022f8:	9205      	str	r2, [sp, #20]
 80022fa:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80022fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022fe:	f042 0201 	orr.w	r2, r2, #1
 8002302:	631a      	str	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002304:	2200      	movs	r2, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002308:	f003 0301 	and.w	r3, r3, #1
 800230c:	9306      	str	r3, [sp, #24]
 800230e:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002310:	f7fe faa0 	bl	8000854 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8002314:	2200      	movs	r2, #0
 8002316:	2140      	movs	r1, #64	; 0x40
 8002318:	4871      	ldr	r0, [pc, #452]	; (80024e0 <main+0x270>)
 800231a:	f7fe fa9b 	bl	8000854 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800231e:	4b71      	ldr	r3, [pc, #452]	; (80024e4 <main+0x274>)
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8002320:	a911      	add	r1, sp, #68	; 0x44
 8002322:	4871      	ldr	r0, [pc, #452]	; (80024e8 <main+0x278>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002324:	9312      	str	r3, [sp, #72]	; 0x48
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8002326:	f8cd 9044 	str.w	r9, [sp, #68]	; 0x44
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800232a:	9413      	str	r4, [sp, #76]	; 0x4c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800232c:	f7fe f9b4 	bl	8000698 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD1_Pin|LD2_Pin;
 8002330:	2381      	movs	r3, #129	; 0x81
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002332:	a911      	add	r1, sp, #68	; 0x44
 8002334:	4867      	ldr	r0, [pc, #412]	; (80024d4 <main+0x264>)
  GPIO_InitStruct.Pin = LD1_Pin|LD2_Pin;
 8002336:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002338:	9712      	str	r7, [sp, #72]	; 0x48
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800233a:	9413      	str	r4, [sp, #76]	; 0x4c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800233c:	9414      	str	r4, [sp, #80]	; 0x50
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800233e:	f7fe f9ab 	bl	8000698 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8002342:	2340      	movs	r3, #64	; 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002344:	a911      	add	r1, sp, #68	; 0x44
 8002346:	4866      	ldr	r0, [pc, #408]	; (80024e0 <main+0x270>)
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8002348:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800234a:	9712      	str	r7, [sp, #72]	; 0x48
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800234c:	9413      	str	r4, [sp, #76]	; 0x4c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800234e:	9414      	str	r4, [sp, #80]	; 0x50
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002350:	f7fe f9a2 	bl	8000698 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8002354:	2380      	movs	r3, #128	; 0x80
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002356:	a911      	add	r1, sp, #68	; 0x44
 8002358:	4861      	ldr	r0, [pc, #388]	; (80024e0 <main+0x270>)
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800235a:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800235c:	9412      	str	r4, [sp, #72]	; 0x48
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800235e:	9413      	str	r4, [sp, #76]	; 0x4c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002360:	f7fe f99a 	bl	8000698 <HAL_GPIO_Init>
  huart3.Init.BaudRate = 115200;
 8002364:	4a61      	ldr	r2, [pc, #388]	; (80024ec <main+0x27c>)
 8002366:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800236a:	4630      	mov	r0, r6
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800236c:	60b4      	str	r4, [r6, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800236e:	60f4      	str	r4, [r6, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002370:	6134      	str	r4, [r6, #16]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002372:	61b4      	str	r4, [r6, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002374:	61f4      	str	r4, [r6, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002376:	6234      	str	r4, [r6, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002378:	6274      	str	r4, [r6, #36]	; 0x24
  huart3.Init.BaudRate = 115200;
 800237a:	e886 000c 	stmia.w	r6, {r2, r3}
  huart3.Init.Mode = UART_MODE_TX_RX;
 800237e:	230c      	movs	r3, #12
 8002380:	6173      	str	r3, [r6, #20]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002382:	f7ff fd88 	bl	8001e96 <HAL_UART_Init>
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002386:	485a      	ldr	r0, [pc, #360]	; (80024f0 <main+0x280>)
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8002388:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 800238c:	2306      	movs	r3, #6
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800238e:	61c7      	str	r7, [r0, #28]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8002390:	6287      	str	r7, [r0, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8002392:	62c7      	str	r7, [r0, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8002394:	6104      	str	r4, [r0, #16]
  hpcd_USB_OTG_FS.Init.ep0_mps = DEP0CTL_MPS_64;
 8002396:	6144      	str	r4, [r0, #20]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002398:	f8c0 8018 	str.w	r8, [r0, #24]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800239c:	6204      	str	r4, [r0, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800239e:	6244      	str	r4, [r0, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80023a0:	6304      	str	r4, [r0, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80023a2:	e880 000a 	stmia.w	r0, {r1, r3}
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80023a6:	f7fe faf6 	bl	8000996 <HAL_PCD_Init>
  hi2c1.Init.Timing = 0x6000030D;
 80023aa:	4b52      	ldr	r3, [pc, #328]	; (80024f4 <main+0x284>)
 80023ac:	4852      	ldr	r0, [pc, #328]	; (80024f8 <main+0x288>)
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80023ae:	60ef      	str	r7, [r5, #12]
  htim1.Init.Period = 1000;
 80023b0:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
  hi2c1.Init.OwnAddress1 = 0;
 80023b4:	60ac      	str	r4, [r5, #8]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80023b6:	612c      	str	r4, [r5, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80023b8:	616c      	str	r4, [r5, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80023ba:	61ac      	str	r4, [r5, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80023bc:	61ec      	str	r4, [r5, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80023be:	622c      	str	r4, [r5, #32]
  hi2c1.Init.Timing = 0x6000030D;
 80023c0:	e885 0009 	stmia.w	r5, {r0, r3}
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80023c4:	4628      	mov	r0, r5
 80023c6:	f7fe fa4a 	bl	800085e <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80023ca:	4621      	mov	r1, r4
 80023cc:	4628      	mov	r0, r5
 80023ce:	f7fe fa97 	bl	8000900 <HAL_I2CEx_ConfigAnalogFilter>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80023d2:	4621      	mov	r1, r4
 80023d4:	4628      	mov	r0, r5
  htim1.Instance = TIM1;
 80023d6:	4d49      	ldr	r5, [pc, #292]	; (80024fc <main+0x28c>)
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80023d8:	f7fe fab8 	bl	800094c <HAL_I2CEx_ConfigDigitalFilter>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80023dc:	221c      	movs	r2, #28
 80023de:	4621      	mov	r1, r4
 80023e0:	a80a      	add	r0, sp, #40	; 0x28
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023e2:	9407      	str	r4, [sp, #28]
 80023e4:	9408      	str	r4, [sp, #32]
 80023e6:	9409      	str	r4, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 80023e8:	f000 fa1b 	bl	8002822 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80023ec:	222c      	movs	r2, #44	; 0x2c
 80023ee:	4621      	mov	r1, r4
 80023f0:	a811      	add	r0, sp, #68	; 0x44
 80023f2:	f000 fa16 	bl	8002822 <memset>
  htim1.Init.Prescaler = 216-1;
 80023f6:	23d7      	movs	r3, #215	; 0xd7
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80023f8:	4628      	mov	r0, r5
  htim1.Instance = TIM1;
 80023fa:	f8c5 a000 	str.w	sl, [r5]
  htim1.Init.Prescaler = 216-1;
 80023fe:	606b      	str	r3, [r5, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002400:	60ac      	str	r4, [r5, #8]
  htim1.Init.Period = 1000;
 8002402:	60ef      	str	r7, [r5, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002404:	612c      	str	r4, [r5, #16]
  htim1.Init.RepetitionCounter = 0;
 8002406:	616c      	str	r4, [r5, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002408:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800240a:	f7ff f8a3 	bl	8001554 <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800240e:	a907      	add	r1, sp, #28
 8002410:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002412:	9407      	str	r4, [sp, #28]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002414:	9408      	str	r4, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002416:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002418:	f7ff fa06 	bl	8001828 <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800241c:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800241e:	4622      	mov	r2, r4
 8002420:	a90a      	add	r1, sp, #40	; 0x28
 8002422:	4628      	mov	r0, r5
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002424:	930a      	str	r3, [sp, #40]	; 0x28
  sConfigOC.Pulse = 500;
 8002426:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800242a:	940c      	str	r4, [sp, #48]	; 0x30
  sConfigOC.Pulse = 500;
 800242c:	930b      	str	r3, [sp, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800242e:	940d      	str	r4, [sp, #52]	; 0x34
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002430:	940e      	str	r4, [sp, #56]	; 0x38
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002432:	940f      	str	r4, [sp, #60]	; 0x3c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002434:	9410      	str	r4, [sp, #64]	; 0x40
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002436:	f7ff fa5f 	bl	80018f8 <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800243a:	2204      	movs	r2, #4
 800243c:	a90a      	add	r1, sp, #40	; 0x28
 800243e:	4628      	mov	r0, r5
 8002440:	f7ff fa5a 	bl	80018f8 <HAL_TIM_PWM_ConfigChannel>
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002444:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002448:	a911      	add	r1, sp, #68	; 0x44
 800244a:	4628      	mov	r0, r5
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800244c:	9319      	str	r3, [sp, #100]	; 0x64
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800244e:	9411      	str	r4, [sp, #68]	; 0x44
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002450:	9412      	str	r4, [sp, #72]	; 0x48
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002452:	9413      	str	r4, [sp, #76]	; 0x4c
  sBreakDeadTimeConfig.DeadTime = 0;
 8002454:	9414      	str	r4, [sp, #80]	; 0x50
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002456:	9415      	str	r4, [sp, #84]	; 0x54
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002458:	f8cd 9058 	str.w	r9, [sp, #88]	; 0x58
  sBreakDeadTimeConfig.BreakFilter = 0;
 800245c:	9417      	str	r4, [sp, #92]	; 0x5c
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800245e:	9418      	str	r4, [sp, #96]	; 0x60
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002460:	941a      	str	r4, [sp, #104]	; 0x68
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002462:	941b      	str	r4, [sp, #108]	; 0x6c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002464:	f7ff fa06 	bl	8001874 <HAL_TIMEx_ConfigBreakDeadTime>
  HAL_TIM_MspPostInit(&htim1);
 8002468:	4628      	mov	r0, r5
 800246a:	f000 f8af 	bl	80025cc <HAL_TIM_MspPostInit>
  uint8_t menu[100]="q(Q):LD1 on(off) w(W):LD2 on(off) e(E):LD3 on(dimming) r(R):IMU(break)";
 800246e:	2247      	movs	r2, #71	; 0x47
 8002470:	4923      	ldr	r1, [pc, #140]	; (8002500 <main+0x290>)
 8002472:	a811      	add	r0, sp, #68	; 0x44
 8002474:	f000 f9ca 	bl	800280c <memcpy>
 8002478:	221d      	movs	r2, #29
 800247a:	4621      	mov	r1, r4
 800247c:	f10d 008b 	add.w	r0, sp, #139	; 0x8b
 8002480:	f000 f9cf 	bl	8002822 <memset>
  uint8_t line_clear[2] = "\n\r";
 8002484:	f640 530a 	movw	r3, #3338	; 0xd0a
  HAL_UART_Transmit(&huart3, menu, sizeof(menu), 1000);
 8002488:	2264      	movs	r2, #100	; 0x64
 800248a:	a911      	add	r1, sp, #68	; 0x44
  uint8_t line_clear[2] = "\n\r";
 800248c:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
  HAL_UART_Transmit(&huart3, menu, sizeof(menu), 1000);
 8002490:	4630      	mov	r0, r6
 8002492:	463b      	mov	r3, r7
 8002494:	f7ff fae7 	bl	8001a66 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart3, line_clear, sizeof(line_clear), 1000);
 8002498:	463b      	mov	r3, r7
 800249a:	4642      	mov	r2, r8
 800249c:	a90a      	add	r1, sp, #40	; 0x28
 800249e:	4630      	mov	r0, r6
 80024a0:	f7ff fae1 	bl	8001a66 <HAL_UART_Transmit>
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 80024a4:	4621      	mov	r1, r4
 80024a6:	4628      	mov	r0, r5
 80024a8:	f7ff f936 	bl	8001718 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 80024ac:	4621      	mov	r1, r4
 80024ae:	4628      	mov	r0, r5
 80024b0:	f7ff f9a8 	bl	8001804 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);
 80024b4:	2104      	movs	r1, #4
 80024b6:	4628      	mov	r0, r5
 80024b8:	f7ff f92e 	bl	8001718 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 80024bc:	2104      	movs	r1, #4
 80024be:	4628      	mov	r0, r5
 80024c0:	f7ff f9a0 	bl	8001804 <HAL_TIMEx_PWMN_Start>
  TIM1->ARR = 5000;
 80024c4:	f241 3388 	movw	r3, #5000	; 0x1388
 80024c8:	f8ca 302c 	str.w	r3, [sl, #44]	; 0x2c
 80024cc:	e7fe      	b.n	80024cc <main+0x25c>
 80024ce:	bf00      	nop
 80024d0:	40023800 	.word	0x40023800
 80024d4:	40020400 	.word	0x40020400
 80024d8:	2000002c 	.word	0x2000002c
 80024dc:	2000009c 	.word	0x2000009c
 80024e0:	40021800 	.word	0x40021800
 80024e4:	10110000 	.word	0x10110000
 80024e8:	40020800 	.word	0x40020800
 80024ec:	40004800 	.word	0x40004800
 80024f0:	200000e8 	.word	0x200000e8
 80024f4:	6000030d 	.word	0x6000030d
 80024f8:	40005400 	.word	0x40005400
 80024fc:	200004e8 	.word	0x200004e8
 8002500:	0800284c 	.word	0x0800284c
 8002504:	40010000 	.word	0x40010000

08002508 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002508:	4b0a      	ldr	r3, [pc, #40]	; (8002534 <HAL_MspInit+0x2c>)
{
 800250a:	b082      	sub	sp, #8
  __HAL_RCC_PWR_CLK_ENABLE();
 800250c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800250e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002512:	641a      	str	r2, [r3, #64]	; 0x40
 8002514:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002516:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 800251a:	9200      	str	r2, [sp, #0]
 800251c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800251e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002520:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002524:	645a      	str	r2, [r3, #68]	; 0x44
 8002526:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002528:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800252c:	9301      	str	r3, [sp, #4]
 800252e:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002530:	b002      	add	sp, #8
 8002532:	4770      	bx	lr
 8002534:	40023800 	.word	0x40023800

08002538 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002538:	b510      	push	{r4, lr}
 800253a:	b088      	sub	sp, #32
 800253c:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800253e:	2214      	movs	r2, #20
 8002540:	2100      	movs	r1, #0
 8002542:	a803      	add	r0, sp, #12
 8002544:	f000 f96d 	bl	8002822 <memset>
  if(hi2c->Instance==I2C1)
 8002548:	6822      	ldr	r2, [r4, #0]
 800254a:	4b13      	ldr	r3, [pc, #76]	; (8002598 <HAL_I2C_MspInit+0x60>)
 800254c:	429a      	cmp	r2, r3
 800254e:	d121      	bne.n	8002594 <HAL_I2C_MspInit+0x5c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002550:	4c12      	ldr	r4, [pc, #72]	; (800259c <HAL_I2C_MspInit+0x64>)
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002552:	a903      	add	r1, sp, #12
 8002554:	4812      	ldr	r0, [pc, #72]	; (80025a0 <HAL_I2C_MspInit+0x68>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002556:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002558:	f043 0302 	orr.w	r3, r3, #2
 800255c:	6323      	str	r3, [r4, #48]	; 0x30
 800255e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002560:	f003 0302 	and.w	r3, r3, #2
 8002564:	9301      	str	r3, [sp, #4]
 8002566:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8002568:	f44f 7310 	mov.w	r3, #576	; 0x240
 800256c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800256e:	2312      	movs	r3, #18
 8002570:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002572:	2301      	movs	r3, #1
 8002574:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002576:	2303      	movs	r3, #3
 8002578:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800257a:	2304      	movs	r3, #4
 800257c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800257e:	f7fe f88b 	bl	8000698 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002582:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002584:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002588:	6423      	str	r3, [r4, #64]	; 0x40
 800258a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800258c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002590:	9302      	str	r3, [sp, #8]
 8002592:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002594:	b008      	add	sp, #32
 8002596:	bd10      	pop	{r4, pc}
 8002598:	40005400 	.word	0x40005400
 800259c:	40023800 	.word	0x40023800
 80025a0:	40020400 	.word	0x40020400

080025a4 <HAL_TIM_PWM_MspInit>:
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{

  if(htim_pwm->Instance==TIM1)
 80025a4:	6802      	ldr	r2, [r0, #0]
{
 80025a6:	b082      	sub	sp, #8
  if(htim_pwm->Instance==TIM1)
 80025a8:	4b07      	ldr	r3, [pc, #28]	; (80025c8 <HAL_TIM_PWM_MspInit+0x24>)
 80025aa:	429a      	cmp	r2, r3
 80025ac:	d10a      	bne.n	80025c4 <HAL_TIM_PWM_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80025ae:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
 80025b2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80025b4:	f042 0201 	orr.w	r2, r2, #1
 80025b8:	645a      	str	r2, [r3, #68]	; 0x44
 80025ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025bc:	f003 0301 	and.w	r3, r3, #1
 80025c0:	9301      	str	r3, [sp, #4]
 80025c2:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80025c4:	b002      	add	sp, #8
 80025c6:	4770      	bx	lr
 80025c8:	40010000 	.word	0x40010000

080025cc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80025cc:	b510      	push	{r4, lr}
 80025ce:	b086      	sub	sp, #24
 80025d0:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025d2:	2214      	movs	r2, #20
 80025d4:	2100      	movs	r1, #0
 80025d6:	a801      	add	r0, sp, #4
 80025d8:	f000 f923 	bl	8002822 <memset>
  if(htim->Instance==TIM1)
 80025dc:	6822      	ldr	r2, [r4, #0]
 80025de:	4b0d      	ldr	r3, [pc, #52]	; (8002614 <HAL_TIM_MspPostInit+0x48>)
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d115      	bne.n	8002610 <HAL_TIM_MspPostInit+0x44>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025e4:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025e8:	a901      	add	r1, sp, #4
 80025ea:	480b      	ldr	r0, [pc, #44]	; (8002618 <HAL_TIM_MspPostInit+0x4c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025ee:	f042 0202 	orr.w	r2, r2, #2
 80025f2:	631a      	str	r2, [r3, #48]	; 0x30
 80025f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f6:	f003 0302 	and.w	r3, r3, #2
 80025fa:	9300      	str	r3, [sp, #0]
 80025fc:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80025fe:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8002602:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002604:	2302      	movs	r3, #2
 8002606:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002608:	2301      	movs	r3, #1
 800260a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800260c:	f7fe f844 	bl	8000698 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002610:	b006      	add	sp, #24
 8002612:	bd10      	pop	{r4, pc}
 8002614:	40010000 	.word	0x40010000
 8002618:	40020400 	.word	0x40020400

0800261c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800261c:	b510      	push	{r4, lr}
 800261e:	b088      	sub	sp, #32
 8002620:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002622:	2214      	movs	r2, #20
 8002624:	2100      	movs	r1, #0
 8002626:	a803      	add	r0, sp, #12
 8002628:	f000 f8fb 	bl	8002822 <memset>
  if(huart->Instance==USART3)
 800262c:	6822      	ldr	r2, [r4, #0]
 800262e:	4b13      	ldr	r3, [pc, #76]	; (800267c <HAL_UART_MspInit+0x60>)
 8002630:	429a      	cmp	r2, r3
 8002632:	d120      	bne.n	8002676 <HAL_UART_MspInit+0x5a>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002634:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002638:	a903      	add	r1, sp, #12
 800263a:	4811      	ldr	r0, [pc, #68]	; (8002680 <HAL_UART_MspInit+0x64>)
    __HAL_RCC_USART3_CLK_ENABLE();
 800263c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800263e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002642:	641a      	str	r2, [r3, #64]	; 0x40
 8002644:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002646:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 800264a:	9201      	str	r2, [sp, #4]
 800264c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800264e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002650:	f042 0208 	orr.w	r2, r2, #8
 8002654:	631a      	str	r2, [r3, #48]	; 0x30
 8002656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002658:	f003 0308 	and.w	r3, r3, #8
 800265c:	9302      	str	r3, [sp, #8]
 800265e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002660:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002664:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002666:	2302      	movs	r3, #2
 8002668:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800266a:	2303      	movs	r3, #3
 800266c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800266e:	2307      	movs	r3, #7
 8002670:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002672:	f7fe f811 	bl	8000698 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002676:	b008      	add	sp, #32
 8002678:	bd10      	pop	{r4, pc}
 800267a:	bf00      	nop
 800267c:	40004800 	.word	0x40004800
 8002680:	40020c00 	.word	0x40020c00

08002684 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002684:	b510      	push	{r4, lr}
 8002686:	b088      	sub	sp, #32
 8002688:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800268a:	2214      	movs	r2, #20
 800268c:	2100      	movs	r1, #0
 800268e:	a803      	add	r0, sp, #12
 8002690:	f000 f8c7 	bl	8002822 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8002694:	6823      	ldr	r3, [r4, #0]
 8002696:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800269a:	d132      	bne.n	8002702 <HAL_PCD_MspInit+0x7e>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800269c:	4c1a      	ldr	r4, [pc, #104]	; (8002708 <HAL_PCD_MspInit+0x84>)
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800269e:	a903      	add	r1, sp, #12
 80026a0:	481a      	ldr	r0, [pc, #104]	; (800270c <HAL_PCD_MspInit+0x88>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026a2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80026a4:	f043 0301 	orr.w	r3, r3, #1
 80026a8:	6323      	str	r3, [r4, #48]	; 0x30
 80026aa:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80026ac:	f003 0301 	and.w	r3, r3, #1
 80026b0:	9300      	str	r3, [sp, #0]
 80026b2:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80026b4:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80026b8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ba:	2302      	movs	r3, #2
 80026bc:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026be:	2303      	movs	r3, #3
 80026c0:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80026c2:	230a      	movs	r3, #10
 80026c4:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026c6:	f7fd ffe7 	bl	8000698 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80026ca:	f44f 7300 	mov.w	r3, #512	; 0x200
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80026ce:	a903      	add	r1, sp, #12
 80026d0:	480e      	ldr	r0, [pc, #56]	; (800270c <HAL_PCD_MspInit+0x88>)
    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80026d2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026d4:	2300      	movs	r3, #0
 80026d6:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026d8:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80026da:	f7fd ffdd 	bl	8000698 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80026de:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80026e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026e4:	6363      	str	r3, [r4, #52]	; 0x34
 80026e6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80026e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026ec:	9301      	str	r3, [sp, #4]
 80026ee:	9b01      	ldr	r3, [sp, #4]
 80026f0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80026f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026f6:	6463      	str	r3, [r4, #68]	; 0x44
 80026f8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80026fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026fe:	9302      	str	r3, [sp, #8]
 8002700:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002702:	b008      	add	sp, #32
 8002704:	bd10      	pop	{r4, pc}
 8002706:	bf00      	nop
 8002708:	40023800 	.word	0x40023800
 800270c:	40020000 	.word	0x40020000

08002710 <NMI_Handler>:
 8002710:	4770      	bx	lr

08002712 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002712:	e7fe      	b.n	8002712 <HardFault_Handler>

08002714 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002714:	e7fe      	b.n	8002714 <MemManage_Handler>

08002716 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002716:	e7fe      	b.n	8002716 <BusFault_Handler>

08002718 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002718:	e7fe      	b.n	8002718 <UsageFault_Handler>

0800271a <SVC_Handler>:
 800271a:	4770      	bx	lr

0800271c <DebugMon_Handler>:
 800271c:	4770      	bx	lr

0800271e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800271e:	4770      	bx	lr

08002720 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002720:	f7fd bf36 	b.w	8000590 <HAL_IncTick>

08002724 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002724:	490f      	ldr	r1, [pc, #60]	; (8002764 <SystemInit+0x40>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002726:	2000      	movs	r0, #0
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002728:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800272c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002730:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  RCC->CR |= (uint32_t)0x00000001;
 8002734:	4b0c      	ldr	r3, [pc, #48]	; (8002768 <SystemInit+0x44>)
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	f042 0201 	orr.w	r2, r2, #1
 800273c:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 800273e:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8002746:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800274a:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800274c:	4a07      	ldr	r2, [pc, #28]	; (800276c <SystemInit+0x48>)
 800274e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002756:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002758:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800275a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800275e:	608b      	str	r3, [r1, #8]
 8002760:	4770      	bx	lr
 8002762:	bf00      	nop
 8002764:	e000ed00 	.word	0xe000ed00
 8002768:	40023800 	.word	0x40023800
 800276c:	24003010 	.word	0x24003010

08002770 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002770:	f8df d034 	ldr.w	sp, [pc, #52]	; 80027a8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002774:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002776:	e003      	b.n	8002780 <LoopCopyDataInit>

08002778 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002778:	4b0c      	ldr	r3, [pc, #48]	; (80027ac <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800277a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800277c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800277e:	3104      	adds	r1, #4

08002780 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002780:	480b      	ldr	r0, [pc, #44]	; (80027b0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002782:	4b0c      	ldr	r3, [pc, #48]	; (80027b4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002784:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002786:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002788:	d3f6      	bcc.n	8002778 <CopyDataInit>
  ldr  r2, =_sbss
 800278a:	4a0b      	ldr	r2, [pc, #44]	; (80027b8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800278c:	e002      	b.n	8002794 <LoopFillZerobss>

0800278e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800278e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002790:	f842 3b04 	str.w	r3, [r2], #4

08002794 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002794:	4b09      	ldr	r3, [pc, #36]	; (80027bc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002796:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002798:	d3f9      	bcc.n	800278e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800279a:	f7ff ffc3 	bl	8002724 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800279e:	f000 f811 	bl	80027c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80027a2:	f7ff fd65 	bl	8002270 <main>
  bx  lr    
 80027a6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80027a8:	20040000 	.word	0x20040000
  ldr  r3, =_sidata
 80027ac:	080028ec 	.word	0x080028ec
  ldr  r0, =_sdata
 80027b0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80027b4:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 80027b8:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 80027bc:	20000528 	.word	0x20000528

080027c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80027c0:	e7fe      	b.n	80027c0 <ADC_IRQHandler>
	...

080027c4 <__libc_init_array>:
 80027c4:	b570      	push	{r4, r5, r6, lr}
 80027c6:	4e0d      	ldr	r6, [pc, #52]	; (80027fc <__libc_init_array+0x38>)
 80027c8:	4c0d      	ldr	r4, [pc, #52]	; (8002800 <__libc_init_array+0x3c>)
 80027ca:	1ba4      	subs	r4, r4, r6
 80027cc:	10a4      	asrs	r4, r4, #2
 80027ce:	2500      	movs	r5, #0
 80027d0:	42a5      	cmp	r5, r4
 80027d2:	d109      	bne.n	80027e8 <__libc_init_array+0x24>
 80027d4:	4e0b      	ldr	r6, [pc, #44]	; (8002804 <__libc_init_array+0x40>)
 80027d6:	4c0c      	ldr	r4, [pc, #48]	; (8002808 <__libc_init_array+0x44>)
 80027d8:	f000 f82c 	bl	8002834 <_init>
 80027dc:	1ba4      	subs	r4, r4, r6
 80027de:	10a4      	asrs	r4, r4, #2
 80027e0:	2500      	movs	r5, #0
 80027e2:	42a5      	cmp	r5, r4
 80027e4:	d105      	bne.n	80027f2 <__libc_init_array+0x2e>
 80027e6:	bd70      	pop	{r4, r5, r6, pc}
 80027e8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80027ec:	4798      	blx	r3
 80027ee:	3501      	adds	r5, #1
 80027f0:	e7ee      	b.n	80027d0 <__libc_init_array+0xc>
 80027f2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80027f6:	4798      	blx	r3
 80027f8:	3501      	adds	r5, #1
 80027fa:	e7f2      	b.n	80027e2 <__libc_init_array+0x1e>
 80027fc:	080028e4 	.word	0x080028e4
 8002800:	080028e4 	.word	0x080028e4
 8002804:	080028e4 	.word	0x080028e4
 8002808:	080028e8 	.word	0x080028e8

0800280c <memcpy>:
 800280c:	b510      	push	{r4, lr}
 800280e:	1e43      	subs	r3, r0, #1
 8002810:	440a      	add	r2, r1
 8002812:	4291      	cmp	r1, r2
 8002814:	d100      	bne.n	8002818 <memcpy+0xc>
 8002816:	bd10      	pop	{r4, pc}
 8002818:	f811 4b01 	ldrb.w	r4, [r1], #1
 800281c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002820:	e7f7      	b.n	8002812 <memcpy+0x6>

08002822 <memset>:
 8002822:	4402      	add	r2, r0
 8002824:	4603      	mov	r3, r0
 8002826:	4293      	cmp	r3, r2
 8002828:	d100      	bne.n	800282c <memset+0xa>
 800282a:	4770      	bx	lr
 800282c:	f803 1b01 	strb.w	r1, [r3], #1
 8002830:	e7f9      	b.n	8002826 <memset+0x4>
	...

08002834 <_init>:
 8002834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002836:	bf00      	nop
 8002838:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800283a:	bc08      	pop	{r3}
 800283c:	469e      	mov	lr, r3
 800283e:	4770      	bx	lr

08002840 <_fini>:
 8002840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002842:	bf00      	nop
 8002844:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002846:	bc08      	pop	{r3}
 8002848:	469e      	mov	lr, r3
 800284a:	4770      	bx	lr
